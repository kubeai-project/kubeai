// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson18582b12DecodeGithubComSubstratusaiKubeaiApiOpenaiV1(in *jlexer.Lexer, out *LogprobResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tokens":
			if in.IsNull() {
				in.Skip()
				out.Tokens = nil
			} else {
				in.Delim('[')
				if out.Tokens == nil {
					if !in.IsDelim(']') {
						out.Tokens = make([]string, 0, 4)
					} else {
						out.Tokens = []string{}
					}
				} else {
					out.Tokens = (out.Tokens)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Tokens = append(out.Tokens, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "token_logprobs":
			if in.IsNull() {
				in.Skip()
				out.TokenLogprobs = nil
			} else {
				in.Delim('[')
				if out.TokenLogprobs == nil {
					if !in.IsDelim(']') {
						out.TokenLogprobs = make([]float32, 0, 16)
					} else {
						out.TokenLogprobs = []float32{}
					}
				} else {
					out.TokenLogprobs = (out.TokenLogprobs)[:0]
				}
				for !in.IsDelim(']') {
					var v2 float32
					v2 = float32(in.Float32())
					out.TokenLogprobs = append(out.TokenLogprobs, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "top_logprobs":
			if in.IsNull() {
				in.Skip()
				out.TopLogprobs = nil
			} else {
				in.Delim('[')
				if out.TopLogprobs == nil {
					if !in.IsDelim(']') {
						out.TopLogprobs = make([]map[string]float32, 0, 8)
					} else {
						out.TopLogprobs = []map[string]float32{}
					}
				} else {
					out.TopLogprobs = (out.TopLogprobs)[:0]
				}
				for !in.IsDelim(']') {
					var v3 map[string]float32
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						if !in.IsDelim('}') {
							v3 = make(map[string]float32)
						} else {
							v3 = nil
						}
						for !in.IsDelim('}') {
							key := string(in.String())
							in.WantColon()
							var v4 float32
							v4 = float32(in.Float32())
							(v3)[key] = v4
							in.WantComma()
						}
						in.Delim('}')
					}
					out.TopLogprobs = append(out.TopLogprobs, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "text_offset":
			if in.IsNull() {
				in.Skip()
				out.TextOffset = nil
			} else {
				in.Delim('[')
				if out.TextOffset == nil {
					if !in.IsDelim(']') {
						out.TextOffset = make([]int, 0, 8)
					} else {
						out.TextOffset = []int{}
					}
				} else {
					out.TextOffset = (out.TextOffset)[:0]
				}
				for !in.IsDelim(']') {
					var v5 int
					v5 = int(in.Int())
					out.TextOffset = append(out.TextOffset, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson18582b12EncodeGithubComSubstratusaiKubeaiApiOpenaiV1(out *jwriter.Writer, in LogprobResult) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Tokens) != 0 {
		const prefix string = ",\"tokens\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v6, v7 := range in.Tokens {
				if v6 > 0 {
					out.RawByte(',')
				}
				out.String(string(v7))
			}
			out.RawByte(']')
		}
	}
	if len(in.TokenLogprobs) != 0 {
		const prefix string = ",\"token_logprobs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v8, v9 := range in.TokenLogprobs {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v9))
			}
			out.RawByte(']')
		}
	}
	if len(in.TopLogprobs) != 0 {
		const prefix string = ",\"top_logprobs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v10, v11 := range in.TopLogprobs {
				if v10 > 0 {
					out.RawByte(',')
				}
				if v11 == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
					out.RawString(`null`)
				} else {
					out.RawByte('{')
					v12First := true
					for v12Name, v12Value := range v11 {
						if v12First {
							v12First = false
						} else {
							out.RawByte(',')
						}
						out.String(string(v12Name))
						out.RawByte(':')
						out.Float32(float32(v12Value))
					}
					out.RawByte('}')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.TextOffset) != 0 {
		const prefix string = ",\"text_offset\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v13, v14 := range in.TextOffset {
				if v13 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v14))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LogprobResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson18582b12EncodeGithubComSubstratusaiKubeaiApiOpenaiV1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LogprobResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson18582b12EncodeGithubComSubstratusaiKubeaiApiOpenaiV1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LogprobResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson18582b12DecodeGithubComSubstratusaiKubeaiApiOpenaiV1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LogprobResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson18582b12DecodeGithubComSubstratusaiKubeaiApiOpenaiV1(l, v)
}
func easyjson18582b12DecodeGithubComSubstratusaiKubeaiApiOpenaiV11(in *jlexer.Lexer, out *CompletionResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "object":
			out.Object = string(in.String())
		case "created":
			out.Created = int64(in.Int64())
		case "model":
			out.Model = string(in.String())
		case "choices":
			if in.IsNull() {
				in.Skip()
				out.Choices = nil
			} else {
				in.Delim('[')
				if out.Choices == nil {
					if !in.IsDelim(']') {
						out.Choices = make([]CompletionChoice, 0, 1)
					} else {
						out.Choices = []CompletionChoice{}
					}
				} else {
					out.Choices = (out.Choices)[:0]
				}
				for !in.IsDelim(']') {
					var v15 CompletionChoice
					(v15).UnmarshalEasyJSON(in)
					out.Choices = append(out.Choices, v15)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "usage":
			if in.IsNull() {
				in.Skip()
				out.Usage = nil
			} else {
				if out.Usage == nil {
					out.Usage = new(Usage)
				}
				(*out.Usage).UnmarshalEasyJSON(in)
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson18582b12EncodeGithubComSubstratusaiKubeaiApiOpenaiV11(out *jwriter.Writer, in CompletionResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"object\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Object))
	}
	if in.Created != 0 {
		const prefix string = ",\"created\":"
		out.RawString(prefix)
		out.Int64(int64(in.Created))
	}
	{
		const prefix string = ",\"model\":"
		out.RawString(prefix)
		out.String(string(in.Model))
	}
	{
		const prefix string = ",\"choices\":"
		out.RawString(prefix)
		if in.Choices == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v16, v17 := range in.Choices {
				if v16 > 0 {
					out.RawByte(',')
				}
				(v17).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.Usage != nil {
		const prefix string = ",\"usage\":"
		out.RawString(prefix)
		(*in.Usage).MarshalEasyJSON(out)
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CompletionResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson18582b12EncodeGithubComSubstratusaiKubeaiApiOpenaiV11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CompletionResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson18582b12EncodeGithubComSubstratusaiKubeaiApiOpenaiV11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CompletionResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson18582b12DecodeGithubComSubstratusaiKubeaiApiOpenaiV11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CompletionResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson18582b12DecodeGithubComSubstratusaiKubeaiApiOpenaiV11(l, v)
}
func easyjson18582b12DecodeGithubComSubstratusaiKubeaiApiOpenaiV12(in *jlexer.Lexer, out *CompletionRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "model":
			out.Model = string(in.String())
		case "prompt":
			if m, ok := out.Prompt.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Prompt.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Prompt = in.Interface()
			}
		case "best_of":
			out.BestOf = int(in.Int())
		case "echo":
			out.Echo = bool(in.Bool())
		case "frequency_penalty":
			out.FrequencyPenalty = float32(in.Float32())
		case "logit_bias":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.LogitBias = make(map[string]int)
				} else {
					out.LogitBias = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v18 int
					v18 = int(in.Int())
					(out.LogitBias)[key] = v18
					in.WantComma()
				}
				in.Delim('}')
			}
		case "store":
			out.Store = bool(in.Bool())
		case "metadata":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Metadata = make(map[string]string)
				} else {
					out.Metadata = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v19 string
					v19 = string(in.String())
					(out.Metadata)[key] = v19
					in.WantComma()
				}
				in.Delim('}')
			}
		case "logprobs":
			out.LogProbs = int(in.Int())
		case "max_tokens":
			out.MaxTokens = int(in.Int())
		case "n":
			out.N = int(in.Int())
		case "presence_penalty":
			out.PresencePenalty = float32(in.Float32())
		case "seed":
			if in.IsNull() {
				in.Skip()
				out.Seed = nil
			} else {
				if out.Seed == nil {
					out.Seed = new(int)
				}
				*out.Seed = int(in.Int())
			}
		case "stop":
			if in.IsNull() {
				in.Skip()
				out.Stop = nil
			} else {
				in.Delim('[')
				if out.Stop == nil {
					if !in.IsDelim(']') {
						out.Stop = make([]string, 0, 4)
					} else {
						out.Stop = []string{}
					}
				} else {
					out.Stop = (out.Stop)[:0]
				}
				for !in.IsDelim(']') {
					var v20 string
					v20 = string(in.String())
					out.Stop = append(out.Stop, v20)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "stream":
			out.Stream = bool(in.Bool())
		case "suffix":
			out.Suffix = string(in.String())
		case "temperature":
			out.Temperature = float32(in.Float32())
		case "top_p":
			out.TopP = float32(in.Float32())
		case "user":
			out.User = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson18582b12EncodeGithubComSubstratusaiKubeaiApiOpenaiV12(out *jwriter.Writer, in CompletionRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"model\":"
		out.RawString(prefix[1:])
		out.String(string(in.Model))
	}
	if in.Prompt != nil {
		const prefix string = ",\"prompt\":"
		out.RawString(prefix)
		if m, ok := in.Prompt.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Prompt.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Prompt))
		}
	}
	if in.BestOf != 0 {
		const prefix string = ",\"best_of\":"
		out.RawString(prefix)
		out.Int(int(in.BestOf))
	}
	if in.Echo {
		const prefix string = ",\"echo\":"
		out.RawString(prefix)
		out.Bool(bool(in.Echo))
	}
	if in.FrequencyPenalty != 0 {
		const prefix string = ",\"frequency_penalty\":"
		out.RawString(prefix)
		out.Float32(float32(in.FrequencyPenalty))
	}
	if len(in.LogitBias) != 0 {
		const prefix string = ",\"logit_bias\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v21First := true
			for v21Name, v21Value := range in.LogitBias {
				if v21First {
					v21First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v21Name))
				out.RawByte(':')
				out.Int(int(v21Value))
			}
			out.RawByte('}')
		}
	}
	if in.Store {
		const prefix string = ",\"store\":"
		out.RawString(prefix)
		out.Bool(bool(in.Store))
	}
	if len(in.Metadata) != 0 {
		const prefix string = ",\"metadata\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v22First := true
			for v22Name, v22Value := range in.Metadata {
				if v22First {
					v22First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v22Name))
				out.RawByte(':')
				out.String(string(v22Value))
			}
			out.RawByte('}')
		}
	}
	if in.LogProbs != 0 {
		const prefix string = ",\"logprobs\":"
		out.RawString(prefix)
		out.Int(int(in.LogProbs))
	}
	if in.MaxTokens != 0 {
		const prefix string = ",\"max_tokens\":"
		out.RawString(prefix)
		out.Int(int(in.MaxTokens))
	}
	if in.N != 0 {
		const prefix string = ",\"n\":"
		out.RawString(prefix)
		out.Int(int(in.N))
	}
	if in.PresencePenalty != 0 {
		const prefix string = ",\"presence_penalty\":"
		out.RawString(prefix)
		out.Float32(float32(in.PresencePenalty))
	}
	if in.Seed != nil {
		const prefix string = ",\"seed\":"
		out.RawString(prefix)
		out.Int(int(*in.Seed))
	}
	if len(in.Stop) != 0 {
		const prefix string = ",\"stop\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v23, v24 := range in.Stop {
				if v23 > 0 {
					out.RawByte(',')
				}
				out.String(string(v24))
			}
			out.RawByte(']')
		}
	}
	if in.Stream {
		const prefix string = ",\"stream\":"
		out.RawString(prefix)
		out.Bool(bool(in.Stream))
	}
	if in.Suffix != "" {
		const prefix string = ",\"suffix\":"
		out.RawString(prefix)
		out.String(string(in.Suffix))
	}
	if in.Temperature != 0 {
		const prefix string = ",\"temperature\":"
		out.RawString(prefix)
		out.Float32(float32(in.Temperature))
	}
	if in.TopP != 0 {
		const prefix string = ",\"top_p\":"
		out.RawString(prefix)
		out.Float32(float32(in.TopP))
	}
	if in.User != "" {
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.String(string(in.User))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CompletionRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson18582b12EncodeGithubComSubstratusaiKubeaiApiOpenaiV12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CompletionRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson18582b12EncodeGithubComSubstratusaiKubeaiApiOpenaiV12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CompletionRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson18582b12DecodeGithubComSubstratusaiKubeaiApiOpenaiV12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CompletionRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson18582b12DecodeGithubComSubstratusaiKubeaiApiOpenaiV12(l, v)
}
func easyjson18582b12DecodeGithubComSubstratusaiKubeaiApiOpenaiV13(in *jlexer.Lexer, out *CompletionChoice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "text":
			out.Text = string(in.String())
		case "index":
			out.Index = int(in.Int())
		case "finish_reason":
			out.FinishReason = string(in.String())
		case "logprobs":
			if in.IsNull() {
				in.Skip()
				out.LogProbs = nil
			} else {
				if out.LogProbs == nil {
					out.LogProbs = new(LogprobResult)
				}
				(*out.LogProbs).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson18582b12EncodeGithubComSubstratusaiKubeaiApiOpenaiV13(out *jwriter.Writer, in CompletionChoice) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix[1:])
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"index\":"
		out.RawString(prefix)
		out.Int(int(in.Index))
	}
	{
		const prefix string = ",\"finish_reason\":"
		out.RawString(prefix)
		out.String(string(in.FinishReason))
	}
	if in.LogProbs != nil {
		const prefix string = ",\"logprobs\":"
		out.RawString(prefix)
		(*in.LogProbs).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CompletionChoice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson18582b12EncodeGithubComSubstratusaiKubeaiApiOpenaiV13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CompletionChoice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson18582b12EncodeGithubComSubstratusaiKubeaiApiOpenaiV13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CompletionChoice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson18582b12DecodeGithubComSubstratusaiKubeaiApiOpenaiV13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CompletionChoice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson18582b12DecodeGithubComSubstratusaiKubeaiApiOpenaiV13(l, v)
}
