// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV1(in *jlexer.Lexer, out *Violence) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "filtered":
			out.Filtered = bool(in.Bool())
		case "severity":
			out.Severity = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV1(out *jwriter.Writer, in Violence) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"filtered\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Filtered))
	}
	if in.Severity != "" {
		const prefix string = ",\"severity\":"
		out.RawString(prefix)
		out.String(string(in.Severity))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Violence) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Violence) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Violence) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Violence) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV1(l, v)
}
func easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV11(in *jlexer.Lexer, out *TopLogProbs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "token":
			out.Token = string(in.String())
		case "logprob":
			out.LogProb = float64(in.Float64())
		case "bytes":
			if in.IsNull() {
				in.Skip()
				out.Bytes = nil
			} else {
				out.Bytes = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV11(out *jwriter.Writer, in TopLogProbs) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"token\":"
		out.RawString(prefix[1:])
		out.String(string(in.Token))
	}
	{
		const prefix string = ",\"logprob\":"
		out.RawString(prefix)
		out.Float64(float64(in.LogProb))
	}
	if len(in.Bytes) != 0 {
		const prefix string = ",\"bytes\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Bytes)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TopLogProbs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TopLogProbs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TopLogProbs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TopLogProbs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV11(l, v)
}
func easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV12(in *jlexer.Lexer, out *ToolFunction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV12(out *jwriter.Writer, in ToolFunction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ToolFunction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ToolFunction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ToolFunction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ToolFunction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV12(l, v)
}
func easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV13(in *jlexer.Lexer, out *ToolChoice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = ToolType(in.String())
		case "function":
			(out.Function).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV13(out *jwriter.Writer, in ToolChoice) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	if true {
		const prefix string = ",\"function\":"
		out.RawString(prefix)
		(in.Function).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ToolChoice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ToolChoice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ToolChoice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ToolChoice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV13(l, v)
}
func easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV14(in *jlexer.Lexer, out *ToolCall) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "index":
			if in.IsNull() {
				in.Skip()
				out.Index = nil
			} else {
				if out.Index == nil {
					out.Index = new(int)
				}
				*out.Index = int(in.Int())
			}
		case "id":
			out.ID = string(in.String())
		case "type":
			out.Type = ToolType(in.String())
		case "function":
			(out.Function).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV14(out *jwriter.Writer, in ToolCall) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Index != nil {
		const prefix string = ",\"index\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(*in.Index))
	}
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"function\":"
		out.RawString(prefix)
		(in.Function).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ToolCall) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ToolCall) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ToolCall) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ToolCall) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV14(l, v)
}
func easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV15(in *jlexer.Lexer, out *Tool) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = ToolType(in.String())
		case "function":
			if in.IsNull() {
				in.Skip()
				out.Function = nil
			} else {
				if out.Function == nil {
					out.Function = new(FunctionDefinition)
				}
				(*out.Function).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV15(out *jwriter.Writer, in Tool) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	if in.Function != nil {
		const prefix string = ",\"function\":"
		out.RawString(prefix)
		(*in.Function).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Tool) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Tool) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Tool) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Tool) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV15(l, v)
}
func easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV16(in *jlexer.Lexer, out *StreamOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "include_usage":
			out.IncludeUsage = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV16(out *jwriter.Writer, in StreamOptions) {
	out.RawByte('{')
	first := true
	_ = first
	if in.IncludeUsage {
		const prefix string = ",\"include_usage\":"
		first = false
		out.RawString(prefix[1:])
		out.Bool(bool(in.IncludeUsage))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StreamOptions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StreamOptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StreamOptions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StreamOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV16(l, v)
}
func easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV17(in *jlexer.Lexer, out *Sexual) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "filtered":
			out.Filtered = bool(in.Bool())
		case "severity":
			out.Severity = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV17(out *jwriter.Writer, in Sexual) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"filtered\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Filtered))
	}
	if in.Severity != "" {
		const prefix string = ",\"severity\":"
		out.RawString(prefix)
		out.String(string(in.Severity))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Sexual) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Sexual) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Sexual) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Sexual) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV17(l, v)
}
func easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV18(in *jlexer.Lexer, out *SelfHarm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "filtered":
			out.Filtered = bool(in.Bool())
		case "severity":
			out.Severity = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV18(out *jwriter.Writer, in SelfHarm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"filtered\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Filtered))
	}
	if in.Severity != "" {
		const prefix string = ",\"severity\":"
		out.RawString(prefix)
		out.String(string(in.Severity))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SelfHarm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SelfHarm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SelfHarm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SelfHarm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV18(l, v)
}
func easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV19(in *jlexer.Lexer, out *PromptFilterResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "index":
			out.Index = int(in.Int())
		case "content_filter_results":
			(out.ContentFilterResults).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV19(out *jwriter.Writer, in PromptFilterResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"index\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Index))
	}
	if true {
		const prefix string = ",\"content_filter_results\":"
		out.RawString(prefix)
		(in.ContentFilterResults).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PromptFilterResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PromptFilterResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PromptFilterResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PromptFilterResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV19(l, v)
}
func easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV110(in *jlexer.Lexer, out *PromptAnnotation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "prompt_index":
			out.PromptIndex = int(in.Int())
		case "content_filter_results":
			(out.ContentFilterResults).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV110(out *jwriter.Writer, in PromptAnnotation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.PromptIndex != 0 {
		const prefix string = ",\"prompt_index\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.PromptIndex))
	}
	if true {
		const prefix string = ",\"content_filter_results\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.ContentFilterResults).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PromptAnnotation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV110(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PromptAnnotation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV110(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PromptAnnotation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV110(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PromptAnnotation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV110(l, v)
}
func easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV111(in *jlexer.Lexer, out *Profanity) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "filtered":
			out.Filtered = bool(in.Bool())
		case "detected":
			out.Detected = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV111(out *jwriter.Writer, in Profanity) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"filtered\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Filtered))
	}
	{
		const prefix string = ",\"detected\":"
		out.RawString(prefix)
		out.Bool(bool(in.Detected))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Profanity) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV111(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Profanity) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV111(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Profanity) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV111(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Profanity) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV111(l, v)
}
func easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV112(in *jlexer.Lexer, out *LogProbs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "content":
			if in.IsNull() {
				in.Skip()
				out.Content = nil
			} else {
				in.Delim('[')
				if out.Content == nil {
					if !in.IsDelim(']') {
						out.Content = make([]LogProb, 0, 0)
					} else {
						out.Content = []LogProb{}
					}
				} else {
					out.Content = (out.Content)[:0]
				}
				for !in.IsDelim(']') {
					var v4 LogProb
					(v4).UnmarshalEasyJSON(in)
					out.Content = append(out.Content, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV112(out *jwriter.Writer, in LogProbs) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix[1:])
		if in.Content == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Content {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LogProbs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV112(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LogProbs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV112(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LogProbs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV112(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LogProbs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV112(l, v)
}
func easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV113(in *jlexer.Lexer, out *LogProb) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "token":
			out.Token = string(in.String())
		case "logprob":
			out.LogProb = float64(in.Float64())
		case "bytes":
			if in.IsNull() {
				in.Skip()
				out.Bytes = nil
			} else {
				out.Bytes = in.Bytes()
			}
		case "top_logprobs":
			if in.IsNull() {
				in.Skip()
				out.TopLogProbs = nil
			} else {
				in.Delim('[')
				if out.TopLogProbs == nil {
					if !in.IsDelim(']') {
						out.TopLogProbs = make([]TopLogProbs, 0, 1)
					} else {
						out.TopLogProbs = []TopLogProbs{}
					}
				} else {
					out.TopLogProbs = (out.TopLogProbs)[:0]
				}
				for !in.IsDelim(']') {
					var v8 TopLogProbs
					(v8).UnmarshalEasyJSON(in)
					out.TopLogProbs = append(out.TopLogProbs, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV113(out *jwriter.Writer, in LogProb) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"token\":"
		out.RawString(prefix[1:])
		out.String(string(in.Token))
	}
	{
		const prefix string = ",\"logprob\":"
		out.RawString(prefix)
		out.Float64(float64(in.LogProb))
	}
	if len(in.Bytes) != 0 {
		const prefix string = ",\"bytes\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Bytes)
	}
	{
		const prefix string = ",\"top_logprobs\":"
		out.RawString(prefix)
		if in.TopLogProbs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.TopLogProbs {
				if v11 > 0 {
					out.RawByte(',')
				}
				(v12).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LogProb) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV113(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LogProb) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV113(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LogProb) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV113(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LogProb) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV113(l, v)
}
func easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV114(in *jlexer.Lexer, out *JailBreak) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "filtered":
			out.Filtered = bool(in.Bool())
		case "detected":
			out.Detected = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV114(out *jwriter.Writer, in JailBreak) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"filtered\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Filtered))
	}
	{
		const prefix string = ",\"detected\":"
		out.RawString(prefix)
		out.Bool(bool(in.Detected))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v JailBreak) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV114(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v JailBreak) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV114(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *JailBreak) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV114(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *JailBreak) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV114(l, v)
}
func easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV115(in *jlexer.Lexer, out *Hate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "filtered":
			out.Filtered = bool(in.Bool())
		case "severity":
			out.Severity = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV115(out *jwriter.Writer, in Hate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"filtered\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Filtered))
	}
	if in.Severity != "" {
		const prefix string = ",\"severity\":"
		out.RawString(prefix)
		out.String(string(in.Severity))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Hate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV115(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Hate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV115(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Hate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV115(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Hate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV115(l, v)
}
func easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV116(in *jlexer.Lexer, out *FunctionDefinition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "strict":
			out.Strict = bool(in.Bool())
		case "parameters":
			if m, ok := out.Parameters.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Parameters.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Parameters = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV116(out *jwriter.Writer, in FunctionDefinition) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	if in.Strict {
		const prefix string = ",\"strict\":"
		out.RawString(prefix)
		out.Bool(bool(in.Strict))
	}
	{
		const prefix string = ",\"parameters\":"
		out.RawString(prefix)
		if m, ok := in.Parameters.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Parameters.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Parameters))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FunctionDefinition) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV116(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FunctionDefinition) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV116(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FunctionDefinition) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV116(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FunctionDefinition) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV116(l, v)
}
func easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV117(in *jlexer.Lexer, out *FunctionCall) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "arguments":
			out.Arguments = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV117(out *jwriter.Writer, in FunctionCall) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Arguments != "" {
		const prefix string = ",\"arguments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Arguments))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FunctionCall) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV117(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FunctionCall) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV117(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FunctionCall) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV117(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FunctionCall) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV117(l, v)
}
func easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV118(in *jlexer.Lexer, out *ContentFilterResults) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hate":
			if in.IsNull() {
				in.Skip()
				out.Hate = nil
			} else {
				if out.Hate == nil {
					out.Hate = new(Hate)
				}
				(*out.Hate).UnmarshalEasyJSON(in)
			}
		case "self_harm":
			if in.IsNull() {
				in.Skip()
				out.SelfHarm = nil
			} else {
				if out.SelfHarm == nil {
					out.SelfHarm = new(SelfHarm)
				}
				(*out.SelfHarm).UnmarshalEasyJSON(in)
			}
		case "sexual":
			if in.IsNull() {
				in.Skip()
				out.Sexual = nil
			} else {
				if out.Sexual == nil {
					out.Sexual = new(Sexual)
				}
				(*out.Sexual).UnmarshalEasyJSON(in)
			}
		case "violence":
			if in.IsNull() {
				in.Skip()
				out.Violence = nil
			} else {
				if out.Violence == nil {
					out.Violence = new(Violence)
				}
				(*out.Violence).UnmarshalEasyJSON(in)
			}
		case "jailbreak":
			if in.IsNull() {
				in.Skip()
				out.JailBreak = nil
			} else {
				if out.JailBreak == nil {
					out.JailBreak = new(JailBreak)
				}
				(*out.JailBreak).UnmarshalEasyJSON(in)
			}
		case "profanity":
			if in.IsNull() {
				in.Skip()
				out.Profanity = nil
			} else {
				if out.Profanity == nil {
					out.Profanity = new(Profanity)
				}
				(*out.Profanity).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV118(out *jwriter.Writer, in ContentFilterResults) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Hate != nil {
		const prefix string = ",\"hate\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Hate).MarshalEasyJSON(out)
	}
	if in.SelfHarm != nil {
		const prefix string = ",\"self_harm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.SelfHarm).MarshalEasyJSON(out)
	}
	if in.Sexual != nil {
		const prefix string = ",\"sexual\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Sexual).MarshalEasyJSON(out)
	}
	if in.Violence != nil {
		const prefix string = ",\"violence\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Violence).MarshalEasyJSON(out)
	}
	if in.JailBreak != nil {
		const prefix string = ",\"jailbreak\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.JailBreak).MarshalEasyJSON(out)
	}
	if in.Profanity != nil {
		const prefix string = ",\"profanity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Profanity).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ContentFilterResults) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV118(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ContentFilterResults) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV118(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ContentFilterResults) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV118(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ContentFilterResults) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV118(l, v)
}
func easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV119(in *jlexer.Lexer, out *ChatMessageImageURL) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.URL = string(in.String())
		case "detail":
			out.Detail = ImageURLDetail(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV119(out *jwriter.Writer, in ChatMessageImageURL) {
	out.RawByte('{')
	first := true
	_ = first
	if in.URL != "" {
		const prefix string = ",\"url\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.URL))
	}
	if in.Detail != "" {
		const prefix string = ",\"detail\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Detail))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChatMessageImageURL) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV119(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChatMessageImageURL) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV119(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChatMessageImageURL) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV119(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChatMessageImageURL) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV119(l, v)
}
func easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV120(in *jlexer.Lexer, out *ChatMessageContentPart) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = ChatMessagePartType(in.String())
		case "text":
			out.Text = string(in.String())
		case "image_url":
			if in.IsNull() {
				in.Skip()
				out.ImageURL = nil
			} else {
				if out.ImageURL == nil {
					out.ImageURL = new(ChatMessageImageURL)
				}
				(*out.ImageURL).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV120(out *jwriter.Writer, in ChatMessageContentPart) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Type != "" {
		const prefix string = ",\"type\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	if in.Text != "" {
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	if in.ImageURL != nil {
		const prefix string = ",\"image_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ImageURL).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChatMessageContentPart) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV120(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChatMessageContentPart) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV120(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChatMessageContentPart) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV120(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChatMessageContentPart) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV120(l, v)
}
func easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV121(in *jlexer.Lexer, out *ChatCompletionResponseFormatJSONSchema) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "schema":
			if m, ok := out.Schema.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Schema.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Schema = in.Interface()
			}
		case "strict":
			if in.IsNull() {
				in.Skip()
				out.Strict = nil
			} else {
				if out.Strict == nil {
					out.Strict = new(bool)
				}
				*out.Strict = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV121(out *jwriter.Writer, in ChatCompletionResponseFormatJSONSchema) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"schema\":"
		out.RawString(prefix)
		if m, ok := in.Schema.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Schema.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Schema))
		}
	}
	if in.Strict != nil {
		const prefix string = ",\"strict\":"
		out.RawString(prefix)
		out.Bool(bool(*in.Strict))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChatCompletionResponseFormatJSONSchema) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV121(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChatCompletionResponseFormatJSONSchema) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV121(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChatCompletionResponseFormatJSONSchema) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV121(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChatCompletionResponseFormatJSONSchema) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV121(l, v)
}
func easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV122(in *jlexer.Lexer, out *ChatCompletionResponseFormat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = ChatCompletionResponseFormatType(in.String())
		case "json_schema":
			if in.IsNull() {
				in.Skip()
				out.JSONSchema = nil
			} else {
				if out.JSONSchema == nil {
					out.JSONSchema = new(ChatCompletionResponseFormatJSONSchema)
				}
				(*out.JSONSchema).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV122(out *jwriter.Writer, in ChatCompletionResponseFormat) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Type != "" {
		const prefix string = ",\"type\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	if in.JSONSchema != nil {
		const prefix string = ",\"json_schema\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.JSONSchema).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChatCompletionResponseFormat) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV122(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChatCompletionResponseFormat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV122(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChatCompletionResponseFormat) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV122(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChatCompletionResponseFormat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV122(l, v)
}
func easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV123(in *jlexer.Lexer, out *ChatCompletionResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "object":
			out.Object = string(in.String())
		case "created":
			out.Created = int64(in.Int64())
		case "model":
			out.Model = string(in.String())
		case "choices":
			if in.IsNull() {
				in.Skip()
				out.Choices = nil
			} else {
				in.Delim('[')
				if out.Choices == nil {
					if !in.IsDelim(']') {
						out.Choices = make([]ChatCompletionChoice, 0, 0)
					} else {
						out.Choices = []ChatCompletionChoice{}
					}
				} else {
					out.Choices = (out.Choices)[:0]
				}
				for !in.IsDelim(']') {
					var v13 ChatCompletionChoice
					(v13).UnmarshalEasyJSON(in)
					out.Choices = append(out.Choices, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "usage":
			if in.IsNull() {
				in.Skip()
				out.Usage = nil
			} else {
				if out.Usage == nil {
					out.Usage = new(Usage)
				}
				(*out.Usage).UnmarshalEasyJSON(in)
			}
		case "system_fingerprint":
			out.SystemFingerprint = string(in.String())
		case "prompt_filter_results":
			if in.IsNull() {
				in.Skip()
				out.PromptFilterResults = nil
			} else {
				in.Delim('[')
				if out.PromptFilterResults == nil {
					if !in.IsDelim(']') {
						out.PromptFilterResults = make([]PromptFilterResult, 0, 1)
					} else {
						out.PromptFilterResults = []PromptFilterResult{}
					}
				} else {
					out.PromptFilterResults = (out.PromptFilterResults)[:0]
				}
				for !in.IsDelim(']') {
					var v14 PromptFilterResult
					(v14).UnmarshalEasyJSON(in)
					out.PromptFilterResults = append(out.PromptFilterResults, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV123(out *jwriter.Writer, in ChatCompletionResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"object\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Object))
	}
	if in.Created != 0 {
		const prefix string = ",\"created\":"
		out.RawString(prefix)
		out.Int64(int64(in.Created))
	}
	{
		const prefix string = ",\"model\":"
		out.RawString(prefix)
		out.String(string(in.Model))
	}
	{
		const prefix string = ",\"choices\":"
		out.RawString(prefix)
		if in.Choices == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v15, v16 := range in.Choices {
				if v15 > 0 {
					out.RawByte(',')
				}
				(v16).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.Usage != nil {
		const prefix string = ",\"usage\":"
		out.RawString(prefix)
		(*in.Usage).MarshalEasyJSON(out)
	}
	if in.SystemFingerprint != "" {
		const prefix string = ",\"system_fingerprint\":"
		out.RawString(prefix)
		out.String(string(in.SystemFingerprint))
	}
	if len(in.PromptFilterResults) != 0 {
		const prefix string = ",\"prompt_filter_results\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v17, v18 := range in.PromptFilterResults {
				if v17 > 0 {
					out.RawByte(',')
				}
				(v18).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChatCompletionResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV123(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChatCompletionResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV123(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChatCompletionResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV123(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChatCompletionResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV123(l, v)
}
func easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV124(in *jlexer.Lexer, out *ChatCompletionRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "model":
			out.Model = string(in.String())
		case "messages":
			if in.IsNull() {
				in.Skip()
				out.Messages = nil
			} else {
				in.Delim('[')
				if out.Messages == nil {
					if !in.IsDelim(']') {
						out.Messages = make([]ChatCompletionMessage, 0, 0)
					} else {
						out.Messages = []ChatCompletionMessage{}
					}
				} else {
					out.Messages = (out.Messages)[:0]
				}
				for !in.IsDelim(']') {
					var v19 ChatCompletionMessage
					(v19).UnmarshalEasyJSON(in)
					out.Messages = append(out.Messages, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "max_tokens":
			out.MaxTokens = int(in.Int())
		case "max_completion_tokens":
			out.MaxCompletionTokens = int(in.Int())
		case "temperature":
			out.Temperature = float32(in.Float32())
		case "top_p":
			out.TopP = float32(in.Float32())
		case "n":
			out.N = int(in.Int())
		case "stream":
			out.Stream = bool(in.Bool())
		case "stop":
			if in.IsNull() {
				in.Skip()
				out.Stop = nil
			} else {
				in.Delim('[')
				if out.Stop == nil {
					if !in.IsDelim(']') {
						out.Stop = make([]string, 0, 4)
					} else {
						out.Stop = []string{}
					}
				} else {
					out.Stop = (out.Stop)[:0]
				}
				for !in.IsDelim(']') {
					var v20 string
					v20 = string(in.String())
					out.Stop = append(out.Stop, v20)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "presence_penalty":
			out.PresencePenalty = float32(in.Float32())
		case "response_format":
			if in.IsNull() {
				in.Skip()
				out.ResponseFormat = nil
			} else {
				if out.ResponseFormat == nil {
					out.ResponseFormat = new(ChatCompletionResponseFormat)
				}
				(*out.ResponseFormat).UnmarshalEasyJSON(in)
			}
		case "seed":
			if in.IsNull() {
				in.Skip()
				out.Seed = nil
			} else {
				if out.Seed == nil {
					out.Seed = new(int)
				}
				*out.Seed = int(in.Int())
			}
		case "frequency_penalty":
			out.FrequencyPenalty = float32(in.Float32())
		case "logit_bias":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.LogitBias = make(map[string]int)
				} else {
					out.LogitBias = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v21 int
					v21 = int(in.Int())
					(out.LogitBias)[key] = v21
					in.WantComma()
				}
				in.Delim('}')
			}
		case "logprobs":
			out.LogProbs = bool(in.Bool())
		case "top_logprobs":
			out.TopLogProbs = int(in.Int())
		case "user":
			out.User = string(in.String())
		case "functions":
			if in.IsNull() {
				in.Skip()
				out.Functions = nil
			} else {
				in.Delim('[')
				if out.Functions == nil {
					if !in.IsDelim(']') {
						out.Functions = make([]FunctionDefinition, 0, 1)
					} else {
						out.Functions = []FunctionDefinition{}
					}
				} else {
					out.Functions = (out.Functions)[:0]
				}
				for !in.IsDelim(']') {
					var v22 FunctionDefinition
					(v22).UnmarshalEasyJSON(in)
					out.Functions = append(out.Functions, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "function_call":
			if m, ok := out.FunctionCall.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.FunctionCall.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.FunctionCall = in.Interface()
			}
		case "tools":
			if in.IsNull() {
				in.Skip()
				out.Tools = nil
			} else {
				in.Delim('[')
				if out.Tools == nil {
					if !in.IsDelim(']') {
						out.Tools = make([]Tool, 0, 2)
					} else {
						out.Tools = []Tool{}
					}
				} else {
					out.Tools = (out.Tools)[:0]
				}
				for !in.IsDelim(']') {
					var v23 Tool
					(v23).UnmarshalEasyJSON(in)
					out.Tools = append(out.Tools, v23)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tool_choice":
			if m, ok := out.ToolChoice.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ToolChoice.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ToolChoice = in.Interface()
			}
		case "stream_options":
			if in.IsNull() {
				in.Skip()
				out.StreamOptions = nil
			} else {
				if out.StreamOptions == nil {
					out.StreamOptions = new(StreamOptions)
				}
				(*out.StreamOptions).UnmarshalEasyJSON(in)
			}
		case "parallel_tool_calls":
			if m, ok := out.ParallelToolCalls.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ParallelToolCalls.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ParallelToolCalls = in.Interface()
			}
		case "store":
			out.Store = bool(in.Bool())
		case "reasoning_effort":
			out.ReasoningEffort = string(in.String())
		case "metadata":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Metadata = make(map[string]string)
				} else {
					out.Metadata = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v24 string
					v24 = string(in.String())
					(out.Metadata)[key] = v24
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV124(out *jwriter.Writer, in ChatCompletionRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"model\":"
		out.RawString(prefix[1:])
		out.String(string(in.Model))
	}
	{
		const prefix string = ",\"messages\":"
		out.RawString(prefix)
		if in.Messages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v25, v26 := range in.Messages {
				if v25 > 0 {
					out.RawByte(',')
				}
				(v26).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.MaxTokens != 0 {
		const prefix string = ",\"max_tokens\":"
		out.RawString(prefix)
		out.Int(int(in.MaxTokens))
	}
	if in.MaxCompletionTokens != 0 {
		const prefix string = ",\"max_completion_tokens\":"
		out.RawString(prefix)
		out.Int(int(in.MaxCompletionTokens))
	}
	if in.Temperature != 0 {
		const prefix string = ",\"temperature\":"
		out.RawString(prefix)
		out.Float32(float32(in.Temperature))
	}
	if in.TopP != 0 {
		const prefix string = ",\"top_p\":"
		out.RawString(prefix)
		out.Float32(float32(in.TopP))
	}
	if in.N != 0 {
		const prefix string = ",\"n\":"
		out.RawString(prefix)
		out.Int(int(in.N))
	}
	if in.Stream {
		const prefix string = ",\"stream\":"
		out.RawString(prefix)
		out.Bool(bool(in.Stream))
	}
	if len(in.Stop) != 0 {
		const prefix string = ",\"stop\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v27, v28 := range in.Stop {
				if v27 > 0 {
					out.RawByte(',')
				}
				out.String(string(v28))
			}
			out.RawByte(']')
		}
	}
	if in.PresencePenalty != 0 {
		const prefix string = ",\"presence_penalty\":"
		out.RawString(prefix)
		out.Float32(float32(in.PresencePenalty))
	}
	if in.ResponseFormat != nil {
		const prefix string = ",\"response_format\":"
		out.RawString(prefix)
		(*in.ResponseFormat).MarshalEasyJSON(out)
	}
	if in.Seed != nil {
		const prefix string = ",\"seed\":"
		out.RawString(prefix)
		out.Int(int(*in.Seed))
	}
	if in.FrequencyPenalty != 0 {
		const prefix string = ",\"frequency_penalty\":"
		out.RawString(prefix)
		out.Float32(float32(in.FrequencyPenalty))
	}
	if len(in.LogitBias) != 0 {
		const prefix string = ",\"logit_bias\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v29First := true
			for v29Name, v29Value := range in.LogitBias {
				if v29First {
					v29First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v29Name))
				out.RawByte(':')
				out.Int(int(v29Value))
			}
			out.RawByte('}')
		}
	}
	if in.LogProbs {
		const prefix string = ",\"logprobs\":"
		out.RawString(prefix)
		out.Bool(bool(in.LogProbs))
	}
	if in.TopLogProbs != 0 {
		const prefix string = ",\"top_logprobs\":"
		out.RawString(prefix)
		out.Int(int(in.TopLogProbs))
	}
	if in.User != "" {
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.String(string(in.User))
	}
	if len(in.Functions) != 0 {
		const prefix string = ",\"functions\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v30, v31 := range in.Functions {
				if v30 > 0 {
					out.RawByte(',')
				}
				(v31).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.FunctionCall != nil {
		const prefix string = ",\"function_call\":"
		out.RawString(prefix)
		if m, ok := in.FunctionCall.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.FunctionCall.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.FunctionCall))
		}
	}
	if len(in.Tools) != 0 {
		const prefix string = ",\"tools\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v32, v33 := range in.Tools {
				if v32 > 0 {
					out.RawByte(',')
				}
				(v33).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.ToolChoice != nil {
		const prefix string = ",\"tool_choice\":"
		out.RawString(prefix)
		if m, ok := in.ToolChoice.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ToolChoice.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ToolChoice))
		}
	}
	if in.StreamOptions != nil {
		const prefix string = ",\"stream_options\":"
		out.RawString(prefix)
		(*in.StreamOptions).MarshalEasyJSON(out)
	}
	if in.ParallelToolCalls != nil {
		const prefix string = ",\"parallel_tool_calls\":"
		out.RawString(prefix)
		if m, ok := in.ParallelToolCalls.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ParallelToolCalls.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ParallelToolCalls))
		}
	}
	if in.Store {
		const prefix string = ",\"store\":"
		out.RawString(prefix)
		out.Bool(bool(in.Store))
	}
	if in.ReasoningEffort != "" {
		const prefix string = ",\"reasoning_effort\":"
		out.RawString(prefix)
		out.String(string(in.ReasoningEffort))
	}
	if len(in.Metadata) != 0 {
		const prefix string = ",\"metadata\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v34First := true
			for v34Name, v34Value := range in.Metadata {
				if v34First {
					v34First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v34Name))
				out.RawByte(':')
				out.String(string(v34Value))
			}
			out.RawByte('}')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChatCompletionRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV124(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChatCompletionRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV124(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChatCompletionRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV124(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChatCompletionRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV124(l, v)
}
func easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV125(in *jlexer.Lexer, out *ChatCompletionMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "role":
			out.Role = string(in.String())
		case "content":
			if in.IsNull() {
				in.Skip()
				out.Content = nil
			} else {
				if out.Content == nil {
					out.Content = new(ChatMessageContent)
				}
				(*out.Content).UnmarshalEasyJSON(in)
			}
		case "refusal":
			out.Refusal = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "function_call":
			if in.IsNull() {
				in.Skip()
				out.FunctionCall = nil
			} else {
				if out.FunctionCall == nil {
					out.FunctionCall = new(FunctionCall)
				}
				(*out.FunctionCall).UnmarshalEasyJSON(in)
			}
		case "tool_calls":
			if in.IsNull() {
				in.Skip()
				out.ToolCalls = nil
			} else {
				in.Delim('[')
				if out.ToolCalls == nil {
					if !in.IsDelim(']') {
						out.ToolCalls = make([]ToolCall, 0, 0)
					} else {
						out.ToolCalls = []ToolCall{}
					}
				} else {
					out.ToolCalls = (out.ToolCalls)[:0]
				}
				for !in.IsDelim(']') {
					var v35 ToolCall
					(v35).UnmarshalEasyJSON(in)
					out.ToolCalls = append(out.ToolCalls, v35)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tool_call_id":
			out.ToolCallID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV125(out *jwriter.Writer, in ChatCompletionMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"role\":"
		out.RawString(prefix[1:])
		out.String(string(in.Role))
	}
	if in.Content != nil {
		const prefix string = ",\"content\":"
		out.RawString(prefix)
		(*in.Content).MarshalEasyJSON(out)
	}
	if in.Refusal != "" {
		const prefix string = ",\"refusal\":"
		out.RawString(prefix)
		out.String(string(in.Refusal))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	if in.FunctionCall != nil {
		const prefix string = ",\"function_call\":"
		out.RawString(prefix)
		(*in.FunctionCall).MarshalEasyJSON(out)
	}
	if len(in.ToolCalls) != 0 {
		const prefix string = ",\"tool_calls\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v36, v37 := range in.ToolCalls {
				if v36 > 0 {
					out.RawByte(',')
				}
				(v37).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.ToolCallID != "" {
		const prefix string = ",\"tool_call_id\":"
		out.RawString(prefix)
		out.String(string(in.ToolCallID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChatCompletionMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV125(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChatCompletionMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV125(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChatCompletionMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV125(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChatCompletionMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV125(l, v)
}
func easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV126(in *jlexer.Lexer, out *ChatCompletionChoice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "index":
			out.Index = int(in.Int())
		case "message":
			(out.Message).UnmarshalEasyJSON(in)
		case "finish_reason":
			if in.IsNull() {
				in.Skip()
				out.FinishReason = nil
			} else {
				if out.FinishReason == nil {
					out.FinishReason = new(FinishReason)
				}
				*out.FinishReason = FinishReason(in.String())
			}
		case "logprobs":
			if in.IsNull() {
				in.Skip()
				out.LogProbs = nil
			} else {
				if out.LogProbs == nil {
					out.LogProbs = new(LogProbs)
				}
				(*out.LogProbs).UnmarshalEasyJSON(in)
			}
		case "content_filter_results":
			if in.IsNull() {
				in.Skip()
				out.ContentFilterResults = nil
			} else {
				if out.ContentFilterResults == nil {
					out.ContentFilterResults = new(ContentFilterResults)
				}
				(*out.ContentFilterResults).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV126(out *jwriter.Writer, in ChatCompletionChoice) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"index\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Index))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		(in.Message).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"finish_reason\":"
		out.RawString(prefix)
		if in.FinishReason == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.FinishReason))
		}
	}
	if in.LogProbs != nil {
		const prefix string = ",\"logprobs\":"
		out.RawString(prefix)
		(*in.LogProbs).MarshalEasyJSON(out)
	}
	if in.ContentFilterResults != nil {
		const prefix string = ",\"content_filter_results\":"
		out.RawString(prefix)
		(*in.ContentFilterResults).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChatCompletionChoice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV126(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChatCompletionChoice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2932ad71EncodeGithubComSubstratusaiKubeaiApiOpenaiV126(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChatCompletionChoice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV126(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChatCompletionChoice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2932ad71DecodeGithubComSubstratusaiKubeaiApiOpenaiV126(l, v)
}
