// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE259aab6DecodeGithubComSubstratusaiKubeaiApiOpenaiV1(in *jlexer.Lexer, out *EmbeddingResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "object":
			out.Object = string(in.String())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]Embedding, 0, 1)
					} else {
						out.Data = []Embedding{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Embedding
					(v1).UnmarshalEasyJSON(in)
					out.Data = append(out.Data, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "model":
			out.Model = string(in.String())
		case "usage":
			if in.IsNull() {
				in.Skip()
				out.Usage = nil
			} else {
				if out.Usage == nil {
					out.Usage = new(Usage)
				}
				(*out.Usage).UnmarshalEasyJSON(in)
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE259aab6EncodeGithubComSubstratusaiKubeaiApiOpenaiV1(out *jwriter.Writer, in EmbeddingResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"object\":"
		out.RawString(prefix[1:])
		out.String(string(in.Object))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Data {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"model\":"
		out.RawString(prefix)
		out.String(string(in.Model))
	}
	if in.Usage != nil {
		const prefix string = ",\"usage\":"
		out.RawString(prefix)
		(*in.Usage).MarshalEasyJSON(out)
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EmbeddingResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE259aab6EncodeGithubComSubstratusaiKubeaiApiOpenaiV1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EmbeddingResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE259aab6EncodeGithubComSubstratusaiKubeaiApiOpenaiV1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EmbeddingResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE259aab6DecodeGithubComSubstratusaiKubeaiApiOpenaiV1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EmbeddingResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE259aab6DecodeGithubComSubstratusaiKubeaiApiOpenaiV1(l, v)
}
func easyjsonE259aab6DecodeGithubComSubstratusaiKubeaiApiOpenaiV11(in *jlexer.Lexer, out *EmbeddingRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "input":
			if m, ok := out.Input.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Input.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Input = in.Interface()
			}
		case "model":
			out.Model = string(in.String())
		case "user":
			out.User = string(in.String())
		case "encoding_format":
			out.EncodingFormat = EmbeddingEncodingFormat(in.String())
		case "dimensions":
			out.Dimensions = int(in.Int())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE259aab6EncodeGithubComSubstratusaiKubeaiApiOpenaiV11(out *jwriter.Writer, in EmbeddingRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"input\":"
		out.RawString(prefix[1:])
		if m, ok := in.Input.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Input.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Input))
		}
	}
	{
		const prefix string = ",\"model\":"
		out.RawString(prefix)
		out.String(string(in.Model))
	}
	if in.User != "" {
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.String(string(in.User))
	}
	if in.EncodingFormat != "" {
		const prefix string = ",\"encoding_format\":"
		out.RawString(prefix)
		out.String(string(in.EncodingFormat))
	}
	if in.Dimensions != 0 {
		const prefix string = ",\"dimensions\":"
		out.RawString(prefix)
		out.Int(int(in.Dimensions))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EmbeddingRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE259aab6EncodeGithubComSubstratusaiKubeaiApiOpenaiV11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EmbeddingRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE259aab6EncodeGithubComSubstratusaiKubeaiApiOpenaiV11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EmbeddingRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE259aab6DecodeGithubComSubstratusaiKubeaiApiOpenaiV11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EmbeddingRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE259aab6DecodeGithubComSubstratusaiKubeaiApiOpenaiV11(l, v)
}
func easyjsonE259aab6DecodeGithubComSubstratusaiKubeaiApiOpenaiV12(in *jlexer.Lexer, out *Embedding) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "object":
			out.Object = string(in.String())
		case "embedding":
			if in.IsNull() {
				in.Skip()
				out.Embedding = nil
			} else {
				in.Delim('[')
				if out.Embedding == nil {
					if !in.IsDelim(']') {
						out.Embedding = make([]float32, 0, 16)
					} else {
						out.Embedding = []float32{}
					}
				} else {
					out.Embedding = (out.Embedding)[:0]
				}
				for !in.IsDelim(']') {
					var v4 float32
					v4 = float32(in.Float32())
					out.Embedding = append(out.Embedding, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "index":
			out.Index = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE259aab6EncodeGithubComSubstratusaiKubeaiApiOpenaiV12(out *jwriter.Writer, in Embedding) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"object\":"
		out.RawString(prefix[1:])
		out.String(string(in.Object))
	}
	{
		const prefix string = ",\"embedding\":"
		out.RawString(prefix)
		if in.Embedding == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Embedding {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v6))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"index\":"
		out.RawString(prefix)
		out.Int(int(in.Index))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Embedding) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE259aab6EncodeGithubComSubstratusaiKubeaiApiOpenaiV12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Embedding) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE259aab6EncodeGithubComSubstratusaiKubeaiApiOpenaiV12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Embedding) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE259aab6DecodeGithubComSubstratusaiKubeaiApiOpenaiV12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Embedding) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE259aab6DecodeGithubComSubstratusaiKubeaiApiOpenaiV12(l, v)
}
