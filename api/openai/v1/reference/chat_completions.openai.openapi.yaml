openapi: 3.0.0
info:
  title: OpenAI API
  description: The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference
    for more details.
  version: 2.3.0
  termsOfService: https://openai.com/policies/terms-of-use
  contact:
    name: OpenAI Support
    url: https://help.openai.com/
  license:
    name: MIT
    url: https://github.com/openai/openai-openapi/blob/master/LICENSE
servers:
- url: https://api.openai.com/v1
paths:
  /chat/completions:
    post:
      operationId: createChatCompletion
      tags:
      - Chat
      summary: "Creates a model response for the given chat conversation. Learn more\
        \ in the\n[text generation](/docs/guides/text-generation), [vision](/docs/guides/vision),\n\
        and [audio](/docs/guides/audio) guides.\n\nParameter support can differ depending\
        \ on the model used to generate the\nresponse, particularly for newer reasoning\
        \ models. Parameters that are only\nsupported for reasoning models are noted\
        \ below. For the current state of \nunsupported parameters in reasoning models,\
        \ \n[refer to the reasoning guide](/docs/guides/reasoning).\n"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateChatCompletionRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateChatCompletionResponse'
            text/event-stream:
              schema:
                $ref: '#/components/schemas/CreateChatCompletionStreamResponse'
      x-oaiMeta:
        name: Create chat completion
        group: chat
        returns: 'Returns a [chat completion](/docs/api-reference/chat/object) object,
          or a streamed sequence of [chat completion chunk](/docs/api-reference/chat/streaming)
          objects if the request is streamed.

          '
        path: create
        examples:
        - title: Default
          request:
            curl: "curl https://api.openai.com/v1/chat/completions \\\n  -H \"Content-Type:\
              \ application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\"\
              \ \\\n  -d '{\n    \"model\": \"VAR_chat_model_id\",\n    \"messages\"\
              : [\n      {\n        \"role\": \"developer\",\n        \"content\"\
              : \"You are a helpful assistant.\"\n      },\n      {\n        \"role\"\
              : \"user\",\n        \"content\": \"Hello!\"\n      }\n    ]\n  }'\n"
            python: "from openai import OpenAI\nclient = OpenAI()\n\ncompletion =\
              \ client.chat.completions.create(\n  model=\"VAR_chat_model_id\",\n\
              \  messages=[\n    {\"role\": \"developer\", \"content\": \"You are\
              \ a helpful assistant.\"},\n    {\"role\": \"user\", \"content\": \"\
              Hello!\"}\n  ]\n)\n\nprint(completion.choices[0].message)\n"
            node.js: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\
              \nasync function main() {\n  const completion = await openai.chat.completions.create({\n\
              \    messages: [{ role: \"developer\", content: \"You are a helpful\
              \ assistant.\" }],\n    model: \"VAR_chat_model_id\",\n    store: true,\n\
              \  });\n\n  console.log(completion.choices[0]);\n}\n\nmain();"
          response: "{\n  \"id\": \"chatcmpl-123\",\n  \"object\": \"chat.completion\"\
            ,\n  \"created\": 1677652288,\n  \"model\": \"gpt-4o-mini\",\n  \"system_fingerprint\"\
            : \"fp_44709d6fcb\",\n  \"choices\": [{\n    \"index\": 0,\n    \"message\"\
            : {\n      \"role\": \"assistant\",\n      \"content\": \"\\n\\nHello\
            \ there, how may I assist you today?\",\n    },\n    \"logprobs\": null,\n\
            \    \"finish_reason\": \"stop\"\n  }],\n  \"service_tier\": \"default\"\
            ,\n  \"usage\": {\n    \"prompt_tokens\": 9,\n    \"completion_tokens\"\
            : 12,\n    \"total_tokens\": 21,\n    \"completion_tokens_details\": {\n\
            \      \"reasoning_tokens\": 0,\n      \"accepted_prediction_tokens\"\
            : 0,\n      \"rejected_prediction_tokens\": 0\n    }\n  }\n}\n"
        - title: Image input
          request:
            curl: "curl https://api.openai.com/v1/chat/completions \\\n  -H \"Content-Type:\
              \ application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\"\
              \ \\\n  -d '{\n    \"model\": \"gpt-4o\",\n    \"messages\": [\n   \
              \   {\n        \"role\": \"user\",\n        \"content\": [\n       \
              \   {\n            \"type\": \"text\",\n            \"text\": \"What'\\\
              ''s in this image?\"\n          },\n          {\n            \"type\"\
              : \"image_url\",\n            \"image_url\": {\n              \"url\"\
              : \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg\"\
              \n            }\n          }\n        ]\n      }\n    ],\n    \"max_tokens\"\
              : 300\n  }'\n"
            python: "from openai import OpenAI\n\nclient = OpenAI()\n\nresponse =\
              \ client.chat.completions.create(\n    model=\"gpt-4o\",\n    messages=[\n\
              \        {\n            \"role\": \"user\",\n            \"content\"\
              : [\n                {\"type\": \"text\", \"text\": \"What's in this\
              \ image?\"},\n                {\n                    \"type\": \"image_url\"\
              ,\n                    \"image_url\": {\n                        \"\
              url\": \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg\"\
              ,\n                    }\n                },\n            ],\n     \
              \   }\n    ],\n    max_tokens=300,\n)\n\nprint(response.choices[0])\n"
            node.js: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\
              \nasync function main() {\n  const response = await openai.chat.completions.create({\n\
              \    model: \"gpt-4o\",\n    messages: [\n      {\n        role: \"\
              user\",\n        content: [\n          { type: \"text\", text: \"What's\
              \ in this image?\" },\n          {\n            type: \"image_url\"\
              ,\n            image_url: {\n              \"url\": \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg\"\
              ,\n            },\n          }\n        ],\n      },\n    ],\n    store:\
              \ true,\n  });\n  console.log(response.choices[0]);\n}\nmain();"
          response: "{\n  \"id\": \"chatcmpl-123\",\n  \"object\": \"chat.completion\"\
            ,\n  \"created\": 1677652288,\n  \"model\": \"gpt-4o-mini\",\n  \"system_fingerprint\"\
            : \"fp_44709d6fcb\",\n  \"choices\": [{\n    \"index\": 0,\n    \"message\"\
            : {\n      \"role\": \"assistant\",\n      \"content\": \"\\n\\nThis image\
            \ shows a wooden boardwalk extending through a lush green marshland.\"\
            ,\n    },\n    \"logprobs\": null,\n    \"finish_reason\": \"stop\"\n\
            \  }],\n  \"usage\": {\n    \"prompt_tokens\": 9,\n    \"completion_tokens\"\
            : 12,\n    \"total_tokens\": 21,\n    \"completion_tokens_details\": {\n\
            \      \"reasoning_tokens\": 0,\n      \"accepted_prediction_tokens\"\
            : 0,\n      \"rejected_prediction_tokens\": 0\n    }\n  }\n}\n"
        - title: Streaming
          request:
            curl: "curl https://api.openai.com/v1/chat/completions \\\n  -H \"Content-Type:\
              \ application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\"\
              \ \\\n  -d '{\n    \"model\": \"VAR_chat_model_id\",\n    \"messages\"\
              : [\n      {\n        \"role\": \"developer\",\n        \"content\"\
              : \"You are a helpful assistant.\"\n      },\n      {\n        \"role\"\
              : \"user\",\n        \"content\": \"Hello!\"\n      }\n    ],\n    \"\
              stream\": true\n  }'\n"
            python: "from openai import OpenAI\nclient = OpenAI()\n\ncompletion =\
              \ client.chat.completions.create(\n  model=\"VAR_chat_model_id\",\n\
              \  messages=[\n    {\"role\": \"developer\", \"content\": \"You are\
              \ a helpful assistant.\"},\n    {\"role\": \"user\", \"content\": \"\
              Hello!\"}\n  ],\n  stream=True\n)\n\nfor chunk in completion:\n  print(chunk.choices[0].delta)\n"
            node.js: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\
              \nasync function main() {\n  const completion = await openai.chat.completions.create({\n\
              \    model: \"VAR_chat_model_id\",\n    messages: [\n      {\"role\"\
              : \"developer\", \"content\": \"You are a helpful assistant.\"},\n \
              \     {\"role\": \"user\", \"content\": \"Hello!\"}\n    ],\n    store:\
              \ true,\n    stream: true,\n  });\n\n  for await (const chunk of completion)\
              \ {\n    console.log(chunk.choices[0].delta.content);\n  }\n}\n\nmain();"
          response: '{"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-4o-mini",
            "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{"role":"assistant","content":""},"logprobs":null,"finish_reason":null}]}


            {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-4o-mini",
            "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{"content":"Hello"},"logprobs":null,"finish_reason":null}]}


            ....


            {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-4o-mini",
            "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{},"logprobs":null,"finish_reason":"stop"}]}

            '
        - title: Functions
          request:
            curl: "curl https://api.openai.com/v1/chat/completions \\\n-H \"Content-Type:\
              \ application/json\" \\\n-H \"Authorization: Bearer $OPENAI_API_KEY\"\
              \ \\\n-d '{\n  \"model\": \"gpt-4o\",\n  \"messages\": [\n    {\n  \
              \    \"role\": \"user\",\n      \"content\": \"What'\\''s the weather\
              \ like in Boston today?\"\n    }\n  ],\n  \"tools\": [\n    {\n    \
              \  \"type\": \"function\",\n      \"function\": {\n        \"name\"\
              : \"get_current_weather\",\n        \"description\": \"Get the current\
              \ weather in a given location\",\n        \"parameters\": {\n      \
              \    \"type\": \"object\",\n          \"properties\": {\n          \
              \  \"location\": {\n              \"type\": \"string\",\n          \
              \    \"description\": \"The city and state, e.g. San Francisco, CA\"\
              \n            },\n            \"unit\": {\n              \"type\": \"\
              string\",\n              \"enum\": [\"celsius\", \"fahrenheit\"]\n \
              \           }\n          },\n          \"required\": [\"location\"]\n\
              \        }\n      }\n    }\n  ],\n  \"tool_choice\": \"auto\"\n}'\n"
            python: "from openai import OpenAI\nclient = OpenAI()\n\ntools = [\n \
              \ {\n    \"type\": \"function\",\n    \"function\": {\n      \"name\"\
              : \"get_current_weather\",\n      \"description\": \"Get the current\
              \ weather in a given location\",\n      \"parameters\": {\n        \"\
              type\": \"object\",\n        \"properties\": {\n          \"location\"\
              : {\n            \"type\": \"string\",\n            \"description\"\
              : \"The city and state, e.g. San Francisco, CA\",\n          },\n  \
              \        \"unit\": {\"type\": \"string\", \"enum\": [\"celsius\", \"\
              fahrenheit\"]},\n        },\n        \"required\": [\"location\"],\n\
              \      },\n    }\n  }\n]\nmessages = [{\"role\": \"user\", \"content\"\
              : \"What's the weather like in Boston today?\"}]\ncompletion = client.chat.completions.create(\n\
              \  model=\"VAR_chat_model_id\",\n  messages=messages,\n  tools=tools,\n\
              \  tool_choice=\"auto\"\n)\n\nprint(completion)\n"
            node.js: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\
              \nasync function main() {\n  const messages = [{\"role\": \"user\",\
              \ \"content\": \"What's the weather like in Boston today?\"}];\n  const\
              \ tools = [\n      {\n        \"type\": \"function\",\n        \"function\"\
              : {\n          \"name\": \"get_current_weather\",\n          \"description\"\
              : \"Get the current weather in a given location\",\n          \"parameters\"\
              : {\n            \"type\": \"object\",\n            \"properties\":\
              \ {\n              \"location\": {\n                \"type\": \"string\"\
              ,\n                \"description\": \"The city and state, e.g. San Francisco,\
              \ CA\",\n              },\n              \"unit\": {\"type\": \"string\"\
              , \"enum\": [\"celsius\", \"fahrenheit\"]},\n            },\n      \
              \      \"required\": [\"location\"],\n          },\n        }\n    \
              \  }\n  ];\n\n  const response = await openai.chat.completions.create({\n\
              \    model: \"gpt-4o\",\n    messages: messages,\n    tools: tools,\n\
              \    tool_choice: \"auto\",\n    store: true,\n  });\n\n  console.log(response);\n\
              }\n\nmain();"
          response: "{\n  \"id\": \"chatcmpl-abc123\",\n  \"object\": \"chat.completion\"\
            ,\n  \"created\": 1699896916,\n  \"model\": \"gpt-4o-mini\",\n  \"choices\"\
            : [\n    {\n      \"index\": 0,\n      \"message\": {\n        \"role\"\
            : \"assistant\",\n        \"content\": null,\n        \"tool_calls\":\
            \ [\n          {\n            \"id\": \"call_abc123\",\n            \"\
            type\": \"function\",\n            \"function\": {\n              \"name\"\
            : \"get_current_weather\",\n              \"arguments\": \"{\\n\\\"location\\\
            \": \\\"Boston, MA\\\"\\n}\"\n            }\n          }\n        ]\n\
            \      },\n      \"logprobs\": null,\n      \"finish_reason\": \"tool_calls\"\
            \n    }\n  ],\n  \"usage\": {\n    \"prompt_tokens\": 82,\n    \"completion_tokens\"\
            : 17,\n    \"total_tokens\": 99,\n    \"completion_tokens_details\": {\n\
            \      \"reasoning_tokens\": 0,\n      \"accepted_prediction_tokens\"\
            : 0,\n      \"rejected_prediction_tokens\": 0\n    }\n  }\n}\n"
        - title: Logprobs
          request:
            curl: "curl https://api.openai.com/v1/chat/completions \\\n  -H \"Content-Type:\
              \ application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\"\
              \ \\\n  -d '{\n    \"model\": \"VAR_chat_model_id\",\n    \"messages\"\
              : [\n      {\n        \"role\": \"user\",\n        \"content\": \"Hello!\"\
              \n      }\n    ],\n    \"logprobs\": true,\n    \"top_logprobs\": 2\n\
              \  }'\n"
            python: "from openai import OpenAI\nclient = OpenAI()\n\ncompletion =\
              \ client.chat.completions.create(\n  model=\"VAR_chat_model_id\",\n\
              \  messages=[\n    {\"role\": \"user\", \"content\": \"Hello!\"}\n \
              \ ],\n  logprobs=True,\n  top_logprobs=2\n)\n\nprint(completion.choices[0].message)\n\
              print(completion.choices[0].logprobs)\n"
            node.js: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\
              \nasync function main() {\n  const completion = await openai.chat.completions.create({\n\
              \    messages: [{ role: \"user\", content: \"Hello!\" }],\n    model:\
              \ \"VAR_chat_model_id\",\n    store: true,\n    logprobs: true,\n  \
              \  top_logprobs: 2,\n  });\n\n  console.log(completion.choices[0]);\n\
              }\n\nmain();"
          response: "{\n  \"id\": \"chatcmpl-123\",\n  \"object\": \"chat.completion\"\
            ,\n  \"created\": 1702685778,\n  \"model\": \"gpt-4o-mini\",\n  \"choices\"\
            : [\n    {\n      \"index\": 0,\n      \"message\": {\n        \"role\"\
            : \"assistant\",\n        \"content\": \"Hello! How can I assist you today?\"\
            \n      },\n      \"logprobs\": {\n        \"content\": [\n          {\n\
            \            \"token\": \"Hello\",\n            \"logprob\": -0.31725305,\n\
            \            \"bytes\": [72, 101, 108, 108, 111],\n            \"top_logprobs\"\
            : [\n              {\n                \"token\": \"Hello\",\n        \
            \        \"logprob\": -0.31725305,\n                \"bytes\": [72, 101,\
            \ 108, 108, 111]\n              },\n              {\n                \"\
            token\": \"Hi\",\n                \"logprob\": -1.3190403,\n         \
            \       \"bytes\": [72, 105]\n              }\n            ]\n       \
            \   },\n          {\n            \"token\": \"!\",\n            \"logprob\"\
            : -0.02380986,\n            \"bytes\": [\n              33\n         \
            \   ],\n            \"top_logprobs\": [\n              {\n           \
            \     \"token\": \"!\",\n                \"logprob\": -0.02380986,\n \
            \               \"bytes\": [33]\n              },\n              {\n \
            \               \"token\": \" there\",\n                \"logprob\": -3.787621,\n\
            \                \"bytes\": [32, 116, 104, 101, 114, 101]\n          \
            \    }\n            ]\n          },\n          {\n            \"token\"\
            : \" How\",\n            \"logprob\": -0.000054669687,\n            \"\
            bytes\": [32, 72, 111, 119],\n            \"top_logprobs\": [\n      \
            \        {\n                \"token\": \" How\",\n                \"logprob\"\
            : -0.000054669687,\n                \"bytes\": [32, 72, 111, 119]\n  \
            \            },\n              {\n                \"token\": \"<|end|>\"\
            ,\n                \"logprob\": -10.953937,\n                \"bytes\"\
            : null\n              }\n            ]\n          },\n          {\n  \
            \          \"token\": \" can\",\n            \"logprob\": -0.015801601,\n\
            \            \"bytes\": [32, 99, 97, 110],\n            \"top_logprobs\"\
            : [\n              {\n                \"token\": \" can\",\n         \
            \       \"logprob\": -0.015801601,\n                \"bytes\": [32, 99,\
            \ 97, 110]\n              },\n              {\n                \"token\"\
            : \" may\",\n                \"logprob\": -4.161023,\n               \
            \ \"bytes\": [32, 109, 97, 121]\n              }\n            ]\n    \
            \      },\n          {\n            \"token\": \" I\",\n            \"\
            logprob\": -3.7697225e-6,\n            \"bytes\": [\n              32,\n\
            \              73\n            ],\n            \"top_logprobs\": [\n \
            \             {\n                \"token\": \" I\",\n                \"\
            logprob\": -3.7697225e-6,\n                \"bytes\": [32, 73]\n     \
            \         },\n              {\n                \"token\": \" assist\"\
            ,\n                \"logprob\": -13.596657,\n                \"bytes\"\
            : [32, 97, 115, 115, 105, 115, 116]\n              }\n            ]\n\
            \          },\n          {\n            \"token\": \" assist\",\n    \
            \        \"logprob\": -0.04571125,\n            \"bytes\": [32, 97, 115,\
            \ 115, 105, 115, 116],\n            \"top_logprobs\": [\n            \
            \  {\n                \"token\": \" assist\",\n                \"logprob\"\
            : -0.04571125,\n                \"bytes\": [32, 97, 115, 115, 105, 115,\
            \ 116]\n              },\n              {\n                \"token\":\
            \ \" help\",\n                \"logprob\": -3.1089056,\n             \
            \   \"bytes\": [32, 104, 101, 108, 112]\n              }\n           \
            \ ]\n          },\n          {\n            \"token\": \" you\",\n   \
            \         \"logprob\": -5.4385737e-6,\n            \"bytes\": [32, 121,\
            \ 111, 117],\n            \"top_logprobs\": [\n              {\n     \
            \           \"token\": \" you\",\n                \"logprob\": -5.4385737e-6,\n\
            \                \"bytes\": [32, 121, 111, 117]\n              },\n  \
            \            {\n                \"token\": \" today\",\n             \
            \   \"logprob\": -12.807695,\n                \"bytes\": [32, 116, 111,\
            \ 100, 97, 121]\n              }\n            ]\n          },\n      \
            \    {\n            \"token\": \" today\",\n            \"logprob\": -0.0040071653,\n\
            \            \"bytes\": [32, 116, 111, 100, 97, 121],\n            \"\
            top_logprobs\": [\n              {\n                \"token\": \" today\"\
            ,\n                \"logprob\": -0.0040071653,\n                \"bytes\"\
            : [32, 116, 111, 100, 97, 121]\n              },\n              {\n  \
            \              \"token\": \"?\",\n                \"logprob\": -5.5247097,\n\
            \                \"bytes\": [63]\n              }\n            ]\n   \
            \       },\n          {\n            \"token\": \"?\",\n            \"\
            logprob\": -0.0008108172,\n            \"bytes\": [63],\n            \"\
            top_logprobs\": [\n              {\n                \"token\": \"?\",\n\
            \                \"logprob\": -0.0008108172,\n                \"bytes\"\
            : [63]\n              },\n              {\n                \"token\":\
            \ \"?\\n\",\n                \"logprob\": -7.184561,\n               \
            \ \"bytes\": [63, 10]\n              }\n            ]\n          }\n \
            \       ]\n      },\n      \"finish_reason\": \"stop\"\n    }\n  ],\n\
            \  \"usage\": {\n    \"prompt_tokens\": 9,\n    \"completion_tokens\"\
            : 9,\n    \"total_tokens\": 18,\n    \"completion_tokens_details\": {\n\
            \      \"reasoning_tokens\": 0,\n      \"accepted_prediction_tokens\"\
            : 0,\n      \"rejected_prediction_tokens\": 0\n    }\n  },\n  \"system_fingerprint\"\
            : null\n}\n"
components:
  schemas:
    ChatCompletionToolChoiceOption:
      description: 'Controls which (if any) tool is called by the model.

        `none` means the model will not call any tool and instead generates a message.

        `auto` means the model can pick between generating a message or calling one
        or more tools.

        `required` means the model must call one or more tools.

        Specifying a particular tool via `{"type": "function", "function": {"name":
        "my_function"}}` forces the model to call that tool.


        `none` is the default when no tools are present. `auto` is the default if
        tools are present.

        '
      oneOf:
      - type: string
        description: '`none` means the model will not call any tool and instead generates
          a message. `auto` means the model can pick between generating a message
          or calling one or more tools. `required` means the model must call one or
          more tools.

          '
        enum:
        - none
        - auto
        - required
      - $ref: '#/components/schemas/ChatCompletionNamedToolChoice'
      x-oaiExpandable: true
    ChatCompletionRequestDeveloperMessage:
      type: object
      title: Developer message
      description: 'Developer-provided instructions that the model should follow,
        regardless of

        messages sent by the user. With o1 models and newer, `developer` messages

        replace the previous `system` messages.

        '
      properties:
        content:
          description: The contents of the developer message.
          oneOf:
          - type: string
            description: The contents of the developer message.
            title: Text content
          - type: array
            description: An array of content parts with a defined type. For developer
              messages, only type `text` is supported.
            title: Array of content parts
            items:
              $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartText'
            minItems: 1
        role:
          type: string
          enum:
          - developer
          description: The role of the messages author, in this case `developer`.
          x-stainless-const: true
        name:
          type: string
          description: An optional name for the participant. Provides the model information
            to differentiate between participants of the same role.
      required:
      - content
      - role
    ChatCompletionFunctionCallOption:
      type: object
      description: 'Specifying a particular function via `{"name": "my_function"}`
        forces the model to call that function.

        '
      properties:
        name:
          type: string
          description: The name of the function to call.
      required:
      - name
    ReasoningEffort:
      type: string
      enum:
      - low
      - medium
      - high
      default: medium
      nullable: true
      description: "**o1 and o3-mini models only** \n\nConstrains effort on reasoning\
        \ for \n[reasoning models](https://platform.openai.com/docs/guides/reasoning).\n\
        Currently supported values are `low`, `medium`, and `high`. Reducing\nreasoning\
        \ effort can result in faster responses and fewer tokens used\non reasoning\
        \ in a response.\n"
    ResponseFormatJsonSchemaSchema:
      type: object
      description: The schema for the response format, described as a JSON Schema
        object.
      additionalProperties: true
    CompletionUsage:
      type: object
      description: Usage statistics for the completion request.
      properties:
        completion_tokens:
          type: integer
          default: 0
          description: Number of tokens in the generated completion.
        prompt_tokens:
          type: integer
          default: 0
          description: Number of tokens in the prompt.
        total_tokens:
          type: integer
          default: 0
          description: Total number of tokens used in the request (prompt + completion).
        completion_tokens_details:
          type: object
          description: Breakdown of tokens used in a completion.
          properties:
            accepted_prediction_tokens:
              type: integer
              default: 0
              description: 'When using Predicted Outputs, the number of tokens in
                the

                prediction that appeared in the completion.

                '
            audio_tokens:
              type: integer
              default: 0
              description: Audio input tokens generated by the model.
            reasoning_tokens:
              type: integer
              default: 0
              description: Tokens generated by the model for reasoning.
            rejected_prediction_tokens:
              type: integer
              default: 0
              description: 'When using Predicted Outputs, the number of tokens in
                the

                prediction that did not appear in the completion. However, like

                reasoning tokens, these tokens are still counted in the total

                completion tokens for purposes of billing, output, and context window

                limits.

                '
        prompt_tokens_details:
          type: object
          description: Breakdown of tokens used in the prompt.
          properties:
            audio_tokens:
              type: integer
              default: 0
              description: Audio input tokens present in the prompt.
            cached_tokens:
              type: integer
              default: 0
              description: Cached tokens present in the prompt.
      required:
      - prompt_tokens
      - completion_tokens
      - total_tokens
    ChatCompletionRequestSystemMessageContentPart:
      oneOf:
      - $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartText'
      x-oaiExpandable: true
    ChatCompletionRequestAssistantMessage:
      type: object
      title: Assistant message
      description: 'Messages sent by the model in response to user messages.

        '
      properties:
        content:
          x-oaiExpandable: true
          nullable: true
          oneOf:
          - type: string
            description: The contents of the assistant message.
            title: Text content
          - type: array
            description: An array of content parts with a defined type. Can be one
              or more of type `text`, or exactly one of type `refusal`.
            title: Array of content parts
            items:
              $ref: '#/components/schemas/ChatCompletionRequestAssistantMessageContentPart'
            minItems: 1
          description: 'The contents of the assistant message. Required unless `tool_calls`
            or `function_call` is specified.

            '
        refusal:
          nullable: true
          type: string
          description: The refusal message by the assistant.
        role:
          type: string
          enum:
          - assistant
          description: The role of the messages author, in this case `assistant`.
          x-stainless-const: true
        name:
          type: string
          description: An optional name for the participant. Provides the model information
            to differentiate between participants of the same role.
        audio:
          type: object
          nullable: true
          x-oaiExpandable: true
          description: "Data about a previous audio response from the model. \n[Learn\
            \ more](/docs/guides/audio).\n"
          required:
          - id
          properties:
            id:
              type: string
              description: 'Unique identifier for a previous audio response from the
                model.

                '
        tool_calls:
          $ref: '#/components/schemas/ChatCompletionMessageToolCalls'
        function_call:
          type: object
          deprecated: true
          description: Deprecated and replaced by `tool_calls`. The name and arguments
            of a function that should be called, as generated by the model.
          nullable: true
          properties:
            arguments:
              type: string
              description: The arguments to call the function with, as generated by
                the model in JSON format. Note that the model does not always generate
                valid JSON, and may hallucinate parameters not defined by your function
                schema. Validate the arguments in your code before calling your function.
            name:
              type: string
              description: The name of the function to call.
          required:
          - arguments
          - name
      required:
      - role
    ChatCompletionRequestSystemMessage:
      type: object
      title: System message
      description: 'Developer-provided instructions that the model should follow,
        regardless of

        messages sent by the user. With o1 models and newer, use `developer` messages

        for this purpose instead.

        '
      properties:
        content:
          description: The contents of the system message.
          oneOf:
          - type: string
            description: The contents of the system message.
            title: Text content
          - type: array
            description: An array of content parts with a defined type. For system
              messages, only type `text` is supported.
            title: Array of content parts
            items:
              $ref: '#/components/schemas/ChatCompletionRequestSystemMessageContentPart'
            minItems: 1
        role:
          type: string
          enum:
          - system
          description: The role of the messages author, in this case `system`.
          x-stainless-const: true
        name:
          type: string
          description: An optional name for the participant. Provides the model information
            to differentiate between participants of the same role.
      required:
      - content
      - role
    ChatCompletionRequestUserMessage:
      type: object
      title: User message
      description: 'Messages sent by an end user, containing prompts or additional
        context

        information.

        '
      properties:
        content:
          description: 'The contents of the user message.

            '
          oneOf:
          - type: string
            description: The text contents of the message.
            title: Text content
          - type: array
            description: An array of content parts with a defined type. Supported
              options differ based on the [model](/docs/models) being used to generate
              the response. Can contain text, image, or audio inputs.
            title: Array of content parts
            items:
              $ref: '#/components/schemas/ChatCompletionRequestUserMessageContentPart'
            minItems: 1
          x-oaiExpandable: true
        role:
          type: string
          enum:
          - user
          description: The role of the messages author, in this case `user`.
          x-stainless-const: true
        name:
          type: string
          description: An optional name for the participant. Provides the model information
            to differentiate between participants of the same role.
      required:
      - content
      - role
    ChatCompletionRequestFunctionMessage:
      type: object
      title: Function message
      deprecated: true
      properties:
        role:
          type: string
          enum:
          - function
          description: The role of the messages author, in this case `function`.
          x-stainless-const: true
        content:
          nullable: true
          type: string
          description: The contents of the function message.
        name:
          type: string
          description: The name of the function to call.
      required:
      - role
      - content
      - name
    Metadata:
      type: object
      description: "Set of 16 key-value pairs that can be attached to an object. This\
        \ can be\nuseful for storing additional information about the object in a\
        \ structured\nformat, and querying for objects via API or the dashboard. \n\
        \nKeys are strings with a maximum length of 64 characters. Values are strings\n\
        with a maximum length of 512 characters.\n"
      additionalProperties:
        type: string
      x-oaiTypeLabel: map
      nullable: true
    ChatCompletionRequestMessageContentPartRefusal:
      type: object
      title: Refusal content part
      properties:
        type:
          type: string
          enum:
          - refusal
          description: The type of the content part.
          x-stainless-const: true
        refusal:
          type: string
          description: The refusal message generated by the model.
      required:
      - type
      - refusal
    ChatCompletionNamedToolChoice:
      type: object
      description: Specifies a tool the model should use. Use to force the model to
        call a specific function.
      properties:
        type:
          type: string
          enum:
          - function
          description: The type of the tool. Currently, only `function` is supported.
          x-stainless-const: true
        function:
          type: object
          properties:
            name:
              type: string
              description: The name of the function to call.
          required:
          - name
      required:
      - type
      - function
    ChatCompletionMessageToolCalls:
      type: array
      description: The tool calls generated by the model, such as function calls.
      items:
        $ref: '#/components/schemas/ChatCompletionMessageToolCall'
    ChatCompletionRequestToolMessage:
      type: object
      title: Tool message
      properties:
        role:
          type: string
          enum:
          - tool
          description: The role of the messages author, in this case `tool`.
          x-stainless-const: true
        content:
          oneOf:
          - type: string
            description: The contents of the tool message.
            title: Text content
          - type: array
            description: An array of content parts with a defined type. For tool messages,
              only type `text` is supported.
            title: Array of content parts
            items:
              $ref: '#/components/schemas/ChatCompletionRequestToolMessageContentPart'
            minItems: 1
          description: The contents of the tool message.
        tool_call_id:
          type: string
          description: Tool call that this message is responding to.
      required:
      - role
      - content
      - tool_call_id
    ChatCompletionRequestToolMessageContentPart:
      oneOf:
      - $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartText'
      x-oaiExpandable: true
    FunctionParameters:
      type: object
      description: "The parameters the functions accepts, described as a JSON Schema\
        \ object. See the [guide](/docs/guides/function-calling) for examples, and\
        \ the [JSON Schema reference](https://json-schema.org/understanding-json-schema/)\
        \ for documentation about the format. \n\nOmitting `parameters` defines a\
        \ function with an empty parameter list."
      additionalProperties: true
    ChatCompletionFunctions:
      type: object
      deprecated: true
      properties:
        description:
          type: string
          description: A description of what the function does, used by the model
            to choose when and how to call the function.
        name:
          type: string
          description: The name of the function to be called. Must be a-z, A-Z, 0-9,
            or contain underscores and dashes, with a maximum length of 64.
        parameters:
          $ref: '#/components/schemas/FunctionParameters'
      required:
      - name
    ChatCompletionModalities:
      type: array
      nullable: true
      description: 'Output types that you would like the model to generate for this
        request.

        Most models are capable of generating text, which is the default:


        `["text"]`


        The `gpt-4o-audio-preview` model can also be used to [generate audio](/docs/guides/audio).
        To

        request that this model generate both text and audio responses, you can

        use:


        `["text", "audio"]`

        '
      items:
        type: string
        enum:
        - text
        - audio
    CreateChatCompletionStreamResponse:
      type: object
      description: Represents a streamed chunk of a chat completion response returned
        by model, based on the provided input.
      properties:
        id:
          type: string
          description: A unique identifier for the chat completion. Each chunk has
            the same ID.
        choices:
          type: array
          description: 'A list of chat completion choices. Can contain more than one
            elements if `n` is greater than 1. Can also be empty for the

            last chunk if you set `stream_options: {"include_usage": true}`.

            '
          items:
            type: object
            required:
            - delta
            - finish_reason
            - index
            properties:
              delta:
                $ref: '#/components/schemas/ChatCompletionStreamResponseDelta'
              logprobs:
                description: Log probability information for the choice.
                type: object
                nullable: true
                properties:
                  content:
                    description: A list of message content tokens with log probability
                      information.
                    type: array
                    items:
                      $ref: '#/components/schemas/ChatCompletionTokenLogprob'
                    nullable: true
                  refusal:
                    description: A list of message refusal tokens with log probability
                      information.
                    type: array
                    items:
                      $ref: '#/components/schemas/ChatCompletionTokenLogprob'
                    nullable: true
                required:
                - content
                - refusal
              finish_reason:
                type: string
                description: 'The reason the model stopped generating tokens. This
                  will be `stop` if the model hit a natural stop point or a provided
                  stop sequence,

                  `length` if the maximum number of tokens specified in the request
                  was reached,

                  `content_filter` if content was omitted due to a flag from our content
                  filters,

                  `tool_calls` if the model called a tool, or `function_call` (deprecated)
                  if the model called a function.

                  '
                enum:
                - stop
                - length
                - tool_calls
                - content_filter
                - function_call
                nullable: true
              index:
                type: integer
                description: The index of the choice in the list of choices.
        created:
          type: integer
          description: The Unix timestamp (in seconds) of when the chat completion
            was created. Each chunk has the same timestamp.
        model:
          type: string
          description: The model to generate the completion.
        service_tier:
          description: The service tier used for processing the request.
          type: string
          enum:
          - scale
          - default
          example: scale
          nullable: true
        system_fingerprint:
          type: string
          description: 'This fingerprint represents the backend configuration that
            the model runs with.

            Can be used in conjunction with the `seed` request parameter to understand
            when backend changes have been made that might impact determinism.

            '
        object:
          type: string
          description: The object type, which is always `chat.completion.chunk`.
          enum:
          - chat.completion.chunk
          x-stainless-const: true
        usage:
          type: object
          nullable: true
          description: 'An optional field that will only be present when you set `stream_options:
            {"include_usage": true}` in your request.

            When present, it contains a null value except for the last chunk which
            contains the token usage statistics for the entire request.

            '
          properties:
            completion_tokens:
              type: integer
              description: Number of tokens in the generated completion.
            prompt_tokens:
              type: integer
              description: Number of tokens in the prompt.
            total_tokens:
              type: integer
              description: Total number of tokens used in the request (prompt + completion).
          required:
          - prompt_tokens
          - completion_tokens
          - total_tokens
      required:
      - choices
      - created
      - id
      - model
      - object
      x-oaiMeta:
        name: The chat completion chunk object
        group: chat
        example: '{"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-4o-mini",
          "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{"role":"assistant","content":""},"logprobs":null,"finish_reason":null}]}


          {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-4o-mini",
          "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{"content":"Hello"},"logprobs":null,"finish_reason":null}]}


          ....


          {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-4o-mini",
          "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{},"logprobs":null,"finish_reason":"stop"}]}

          '
    ChatCompletionRequestAssistantMessageContentPart:
      oneOf:
      - $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartText'
      - $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartRefusal'
      x-oaiExpandable: true
    ChatCompletionRequestUserMessageContentPart:
      oneOf:
      - $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartText'
      - $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartImage'
      - $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartAudio'
      x-oaiExpandable: true
    ResponseFormatJsonSchema:
      type: object
      properties:
        type:
          type: string
          description: 'The type of response format being defined: `json_schema`'
          enum:
          - json_schema
          x-stainless-const: true
        json_schema:
          type: object
          properties:
            description:
              type: string
              description: A description of what the response format is for, used
                by the model to determine how to respond in the format.
            name:
              type: string
              description: The name of the response format. Must be a-z, A-Z, 0-9,
                or contain underscores and dashes, with a maximum length of 64.
            schema:
              $ref: '#/components/schemas/ResponseFormatJsonSchemaSchema'
            strict:
              type: boolean
              nullable: true
              default: false
              description: Whether to enable strict schema adherence when generating
                the output. If set to true, the model will always follow the exact
                schema defined in the `schema` field. Only a subset of JSON Schema
                is supported when `strict` is `true`. To learn more, read the [Structured
                Outputs guide](/docs/guides/structured-outputs).
          required:
          - name
      required:
      - type
      - json_schema
    PredictionContent:
      type: object
      title: Static Content
      description: 'Static predicted output content, such as the content of a text
        file that is

        being regenerated.

        '
      required:
      - type
      - content
      properties:
        type:
          type: string
          enum:
          - content
          description: 'The type of the predicted content you want to provide. This
            type is

            currently always `content`.

            '
          x-stainless-const: true
        content:
          x-oaiExpandable: true
          description: 'The content that should be matched when generating a model
            response.

            If generated tokens would match this content, the entire model response

            can be returned much more quickly.

            '
          oneOf:
          - type: string
            title: Text content
            description: 'The content used for a Predicted Output. This is often the

              text of a file you are regenerating with minor changes.

              '
          - type: array
            description: An array of content parts with a defined type. Supported
              options differ based on the [model](/docs/models) being used to generate
              the response. Can contain text inputs.
            title: Array of content parts
            items:
              $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartText'
            minItems: 1
    ParallelToolCalls:
      description: Whether to enable [parallel function calling](/docs/guides/function-calling#configuring-parallel-function-calling)
        during tool use.
      type: boolean
      default: true
    ChatCompletionMessageToolCall:
      type: object
      properties:
        id:
          type: string
          description: The ID of the tool call.
        type:
          type: string
          enum:
          - function
          description: The type of the tool. Currently, only `function` is supported.
          x-stainless-const: true
        function:
          type: object
          description: The function that the model called.
          properties:
            name:
              type: string
              description: The name of the function to call.
            arguments:
              type: string
              description: The arguments to call the function with, as generated by
                the model in JSON format. Note that the model does not always generate
                valid JSON, and may hallucinate parameters not defined by your function
                schema. Validate the arguments in your code before calling your function.
          required:
          - name
          - arguments
      required:
      - id
      - type
      - function
    ChatCompletionTokenLogprob:
      type: object
      properties:
        token: &id001
          description: The token.
          type: string
        logprob: &id002
          description: The log probability of this token, if it is within the top
            20 most likely tokens. Otherwise, the value `-9999.0` is used to signify
            that the token is very unlikely.
          type: number
        bytes: &id003
          description: A list of integers representing the UTF-8 bytes representation
            of the token. Useful in instances where characters are represented by
            multiple tokens and their byte representations must be combined to generate
            the correct text representation. Can be `null` if there is no bytes representation
            for the token.
          type: array
          items:
            type: integer
          nullable: true
        top_logprobs:
          description: List of the most likely tokens and their log probability, at
            this token position. In rare cases, there may be fewer than the number
            of requested `top_logprobs` returned.
          type: array
          items:
            type: object
            properties:
              token: *id001
              logprob: *id002
              bytes: *id003
            required:
            - token
            - logprob
            - bytes
      required:
      - token
      - logprob
      - bytes
      - top_logprobs
    ChatCompletionRequestMessageContentPartAudio:
      type: object
      title: Audio content part
      description: 'Learn about [audio inputs](/docs/guides/audio).

        '
      properties:
        type:
          type: string
          enum:
          - input_audio
          description: The type of the content part. Always `input_audio`.
          x-stainless-const: true
        input_audio:
          type: object
          properties:
            data:
              type: string
              description: Base64 encoded audio data.
            format:
              type: string
              enum:
              - wav
              - mp3
              description: 'The format of the encoded audio data. Currently supports
                "wav" and "mp3".

                '
          required:
          - data
          - format
      required:
      - type
      - input_audio
    ResponseFormatText:
      type: object
      properties:
        type:
          type: string
          description: 'The type of response format being defined: `text`'
          enum:
          - text
          x-stainless-const: true
      required:
      - type
    ChatCompletionTool:
      type: object
      properties:
        type:
          type: string
          enum:
          - function
          description: The type of the tool. Currently, only `function` is supported.
          x-stainless-const: true
        function:
          $ref: '#/components/schemas/FunctionObject'
      required:
      - type
      - function
    ResponseFormatJsonObject:
      type: object
      properties:
        type:
          type: string
          description: 'The type of response format being defined: `json_object`'
          enum:
          - json_object
          x-stainless-const: true
      required:
      - type
    ChatCompletionRequestMessage:
      oneOf:
      - $ref: '#/components/schemas/ChatCompletionRequestDeveloperMessage'
      - $ref: '#/components/schemas/ChatCompletionRequestSystemMessage'
      - $ref: '#/components/schemas/ChatCompletionRequestUserMessage'
      - $ref: '#/components/schemas/ChatCompletionRequestAssistantMessage'
      - $ref: '#/components/schemas/ChatCompletionRequestToolMessage'
      - $ref: '#/components/schemas/ChatCompletionRequestFunctionMessage'
      x-oaiExpandable: true
    ChatCompletionResponseMessage:
      type: object
      description: A chat completion message generated by the model.
      properties:
        content:
          type: string
          description: The contents of the message.
          nullable: true
        refusal:
          type: string
          description: The refusal message generated by the model.
          nullable: true
        tool_calls:
          $ref: '#/components/schemas/ChatCompletionMessageToolCalls'
        role:
          type: string
          enum:
          - assistant
          description: The role of the author of this message.
          x-stainless-const: true
        function_call:
          type: object
          deprecated: true
          description: Deprecated and replaced by `tool_calls`. The name and arguments
            of a function that should be called, as generated by the model.
          properties:
            arguments:
              type: string
              description: The arguments to call the function with, as generated by
                the model in JSON format. Note that the model does not always generate
                valid JSON, and may hallucinate parameters not defined by your function
                schema. Validate the arguments in your code before calling your function.
            name:
              type: string
              description: The name of the function to call.
          required:
          - name
          - arguments
        audio:
          type: object
          nullable: true
          description: 'If the audio output modality is requested, this object contains
            data

            about the audio response from the model. [Learn more](/docs/guides/audio).

            '
          x-oaiExpandable: true
          required:
          - id
          - expires_at
          - data
          - transcript
          properties:
            id:
              type: string
              description: Unique identifier for this audio response.
            expires_at:
              type: integer
              description: 'The Unix timestamp (in seconds) for when this audio response
                will

                no longer be accessible on the server for use in multi-turn

                conversations.

                '
            data:
              type: string
              description: 'Base64 encoded audio bytes generated by the model, in
                the format

                specified in the request.

                '
            transcript:
              type: string
              description: Transcript of the audio generated by the model.
      required:
      - role
      - content
      - refusal
    CreateChatCompletionRequest:
      type: object
      properties:
        messages:
          description: 'A list of messages comprising the conversation so far. Depending
            on the

            [model](/docs/models) you use, different message types (modalities) are

            supported, like [text](/docs/guides/text-generation),

            [images](/docs/guides/vision), and [audio](/docs/guides/audio).

            '
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/ChatCompletionRequestMessage'
        model:
          description: ID of the model to use. See the [model endpoint compatibility](/docs/models#model-endpoint-compatibility)
            table for details on which models work with the Chat API.
          example: gpt-4o
          anyOf:
          - type: string
          - type: string
            enum:
            - o3-mini
            - o3-mini-2025-01-31
            - o1
            - o1-2024-12-17
            - o1-preview
            - o1-preview-2024-09-12
            - o1-mini
            - o1-mini-2024-09-12
            - gpt-4o
            - gpt-4o-2024-11-20
            - gpt-4o-2024-08-06
            - gpt-4o-2024-05-13
            - gpt-4o-audio-preview
            - gpt-4o-audio-preview-2024-10-01
            - gpt-4o-audio-preview-2024-12-17
            - gpt-4o-mini-audio-preview
            - gpt-4o-mini-audio-preview-2024-12-17
            - chatgpt-4o-latest
            - gpt-4o-mini
            - gpt-4o-mini-2024-07-18
            - gpt-4-turbo
            - gpt-4-turbo-2024-04-09
            - gpt-4-0125-preview
            - gpt-4-turbo-preview
            - gpt-4-1106-preview
            - gpt-4-vision-preview
            - gpt-4
            - gpt-4-0314
            - gpt-4-0613
            - gpt-4-32k
            - gpt-4-32k-0314
            - gpt-4-32k-0613
            - gpt-3.5-turbo
            - gpt-3.5-turbo-16k
            - gpt-3.5-turbo-0301
            - gpt-3.5-turbo-0613
            - gpt-3.5-turbo-1106
            - gpt-3.5-turbo-0125
            - gpt-3.5-turbo-16k-0613
          x-oaiTypeLabel: string
        store:
          type: boolean
          default: false
          nullable: true
          description: "Whether or not to store the output of this chat completion\
            \ request for \nuse in our [model distillation](/docs/guides/distillation)\
            \ or\n[evals](/docs/guides/evals) products.\n"
        reasoning_effort:
          $ref: '#/components/schemas/ReasoningEffort'
        metadata:
          $ref: '#/components/schemas/Metadata'
        frequency_penalty:
          type: number
          default: 0
          minimum: -2
          maximum: 2
          nullable: true
          description: 'Number between -2.0 and 2.0. Positive values penalize new
            tokens based on

            their existing frequency in the text so far, decreasing the model''s

            likelihood to repeat the same line verbatim.

            '
        logit_bias:
          type: object
          x-oaiTypeLabel: map
          default: null
          nullable: true
          additionalProperties:
            type: integer
          description: 'Modify the likelihood of specified tokens appearing in the
            completion.


            Accepts a JSON object that maps tokens (specified by their token ID in
            the

            tokenizer) to an associated bias value from -100 to 100. Mathematically,

            the bias is added to the logits generated by the model prior to sampling.

            The exact effect will vary per model, but values between -1 and 1 should

            decrease or increase likelihood of selection; values like -100 or 100

            should result in a ban or exclusive selection of the relevant token.

            '
        logprobs:
          description: 'Whether to return log probabilities of the output tokens or
            not. If true,

            returns the log probabilities of each output token returned in the

            `content` of `message`.

            '
          type: boolean
          default: false
          nullable: true
        top_logprobs:
          description: 'An integer between 0 and 20 specifying the number of most
            likely tokens to

            return at each token position, each with an associated log probability.

            `logprobs` must be set to `true` if this parameter is used.

            '
          type: integer
          minimum: 0
          maximum: 20
          nullable: true
        max_tokens:
          description: 'The maximum number of [tokens](/tokenizer) that can be generated
            in the

            chat completion. This value can be used to control

            [costs](https://openai.com/api/pricing/) for text generated via API.


            This value is now deprecated in favor of `max_completion_tokens`, and
            is

            not compatible with [o1 series models](/docs/guides/reasoning).

            '
          type: integer
          nullable: true
          deprecated: true
        max_completion_tokens:
          description: 'An upper bound for the number of tokens that can be generated
            for a completion, including visible output tokens and [reasoning tokens](/docs/guides/reasoning).

            '
          type: integer
          nullable: true
        n:
          type: integer
          minimum: 1
          maximum: 128
          default: 1
          example: 1
          nullable: true
          description: How many chat completion choices to generate for each input
            message. Note that you will be charged based on the number of generated
            tokens across all of the choices. Keep `n` as `1` to minimize costs.
        modalities:
          $ref: '#/components/schemas/ChatCompletionModalities'
        prediction:
          nullable: true
          x-oaiExpandable: true
          description: 'Configuration for a [Predicted Output](/docs/guides/predicted-outputs),

            which can greatly improve response times when large parts of the model

            response are known ahead of time. This is most common when you are

            regenerating a file with only minor changes to most of the content.

            '
          oneOf:
          - $ref: '#/components/schemas/PredictionContent'
        audio:
          type: object
          nullable: true
          description: 'Parameters for audio output. Required when audio output is
            requested with

            `modalities: ["audio"]`. [Learn more](/docs/guides/audio).

            '
          required:
          - voice
          - format
          x-oaiExpandable: true
          properties:
            voice:
              type: string
              enum:
              - alloy
              - ash
              - ballad
              - coral
              - echo
              - sage
              - shimmer
              - verse
              description: 'The voice the model uses to respond. Supported voices
                are `ash`, `ballad`, `coral`, `sage`, and `verse` (also supported
                but not recommended are `alloy`, `echo`, and `shimmer`; these voices
                are less expressive).

                '
            format:
              type: string
              enum:
              - wav
              - mp3
              - flac
              - opus
              - pcm16
              description: 'Specifies the output audio format. Must be one of `wav`,
                `mp3`, `flac`,

                `opus`, or `pcm16`.

                '
        presence_penalty:
          type: number
          default: 0
          minimum: -2
          maximum: 2
          nullable: true
          description: 'Number between -2.0 and 2.0. Positive values penalize new
            tokens based on

            whether they appear in the text so far, increasing the model''s likelihood

            to talk about new topics.

            '
        response_format:
          description: 'An object specifying the format that the model must output.


            Setting to `{ "type": "json_schema", "json_schema": {...} }` enables

            Structured Outputs which ensures the model will match your supplied JSON

            schema. Learn more in the [Structured Outputs

            guide](/docs/guides/structured-outputs).


            Setting to `{ "type": "json_object" }` enables JSON mode, which ensures

            the message the model generates is valid JSON.


            **Important:** when using JSON mode, you **must** also instruct the model

            to produce JSON yourself via a system or user message. Without this, the

            model may generate an unending stream of whitespace until the generation

            reaches the token limit, resulting in a long-running and seemingly "stuck"

            request. Also note that the message content may be partially cut off if

            `finish_reason="length"`, which indicates the generation exceeded

            `max_tokens` or the conversation exceeded the max context length.

            '
          oneOf:
          - $ref: '#/components/schemas/ResponseFormatText'
          - $ref: '#/components/schemas/ResponseFormatJsonObject'
          - $ref: '#/components/schemas/ResponseFormatJsonSchema'
          x-oaiExpandable: true
        seed:
          type: integer
          format: int64
          nullable: true
          description: 'This feature is in Beta.

            If specified, our system will make a best effort to sample deterministically,
            such that repeated requests with the same `seed` and parameters should
            return the same result.

            Determinism is not guaranteed, and you should refer to the `system_fingerprint`
            response parameter to monitor changes in the backend.

            '
          x-oaiMeta:
            beta: true
        service_tier:
          description: "Specifies the latency tier to use for processing the request.\
            \ This parameter is relevant for customers subscribed to the scale tier\
            \ service:\n  - If set to 'auto', and the Project is Scale tier enabled,\
            \ the system will utilize scale tier credits until they are exhausted.\n\
            \  - If set to 'auto', and the Project is not Scale tier enabled, the\
            \ request will be processed using the default service tier with a lower\
            \ uptime SLA and no latency guarantee.\n  - If set to 'default', the request\
            \ will be processed using the default service tier with a lower uptime\
            \ SLA and no latency guarantee.\n  - When not set, the default behavior\
            \ is 'auto'.\n"
          type: string
          enum:
          - auto
          - default
          nullable: true
          default: auto
        stop:
          description: 'Up to 4 sequences where the API will stop generating further
            tokens.

            '
          default: null
          oneOf:
          - type: string
            nullable: true
          - type: array
            minItems: 1
            maxItems: 4
            items:
              type: string
        stream:
          description: 'If set, partial message deltas will be sent, like in ChatGPT.
            Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)
            as they become available, with the stream terminated by a `data: [DONE]`
            message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).

            '
          type: boolean
          nullable: true
          default: false
        stream_options:
          $ref: '#/components/schemas/ChatCompletionStreamOptions'
        temperature:
          type: number
          minimum: 0
          maximum: 2
          default: 1
          example: 1
          nullable: true
          description: 'What sampling temperature to use, between 0 and 2. Higher
            values like 0.8 will make the output more random, while lower values like
            0.2 will make it more focused and deterministic.

            We generally recommend altering this or `top_p` but not both.

            '
        top_p:
          type: number
          minimum: 0
          maximum: 1
          default: 1
          example: 1
          nullable: true
          description: 'An alternative to sampling with temperature, called nucleus
            sampling,

            where the model considers the results of the tokens with top_p probability

            mass. So 0.1 means only the tokens comprising the top 10% probability
            mass

            are considered.


            We generally recommend altering this or `temperature` but not both.

            '
        tools:
          type: array
          description: 'A list of tools the model may call. Currently, only functions
            are supported as a tool. Use this to provide a list of functions the model
            may generate JSON inputs for. A max of 128 functions are supported.

            '
          items:
            $ref: '#/components/schemas/ChatCompletionTool'
        tool_choice:
          $ref: '#/components/schemas/ChatCompletionToolChoiceOption'
        parallel_tool_calls:
          $ref: '#/components/schemas/ParallelToolCalls'
        user:
          type: string
          example: user-1234
          description: 'A unique identifier representing your end-user, which can
            help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).

            '
        function_call:
          deprecated: true
          description: 'Deprecated in favor of `tool_choice`.


            Controls which (if any) function is called by the model.


            `none` means the model will not call a function and instead generates
            a

            message.


            `auto` means the model can pick between generating a message or calling
            a

            function.


            Specifying a particular function via `{"name": "my_function"}` forces
            the

            model to call that function.


            `none` is the default when no functions are present. `auto` is the default

            if functions are present.

            '
          oneOf:
          - type: string
            description: '`none` means the model will not call a function and instead
              generates a message. `auto` means the model can pick between generating
              a message or calling a function.

              '
            enum:
            - none
            - auto
          - $ref: '#/components/schemas/ChatCompletionFunctionCallOption'
          x-oaiExpandable: true
        functions:
          deprecated: true
          description: 'Deprecated in favor of `tools`.


            A list of functions the model may generate JSON inputs for.

            '
          type: array
          minItems: 1
          maxItems: 128
          items:
            $ref: '#/components/schemas/ChatCompletionFunctions'
      required:
      - model
      - messages
    ChatCompletionStreamResponseDelta:
      type: object
      description: A chat completion delta generated by streamed model responses.
      properties:
        content:
          type: string
          description: The contents of the chunk message.
          nullable: true
        function_call:
          deprecated: true
          type: object
          description: Deprecated and replaced by `tool_calls`. The name and arguments
            of a function that should be called, as generated by the model.
          properties:
            arguments:
              type: string
              description: The arguments to call the function with, as generated by
                the model in JSON format. Note that the model does not always generate
                valid JSON, and may hallucinate parameters not defined by your function
                schema. Validate the arguments in your code before calling your function.
            name:
              type: string
              description: The name of the function to call.
        tool_calls:
          type: array
          items:
            $ref: '#/components/schemas/ChatCompletionMessageToolCallChunk'
        role:
          type: string
          enum:
          - developer
          - system
          - user
          - assistant
          - tool
          description: The role of the author of this message.
        refusal:
          type: string
          description: The refusal message generated by the model.
          nullable: true
    ChatCompletionMessageToolCallChunk:
      type: object
      properties:
        index:
          type: integer
        id:
          type: string
          description: The ID of the tool call.
        type:
          type: string
          enum:
          - function
          description: The type of the tool. Currently, only `function` is supported.
          x-stainless-const: true
        function:
          type: object
          properties:
            name:
              type: string
              description: The name of the function to call.
            arguments:
              type: string
              description: The arguments to call the function with, as generated by
                the model in JSON format. Note that the model does not always generate
                valid JSON, and may hallucinate parameters not defined by your function
                schema. Validate the arguments in your code before calling your function.
      required:
      - index
    FunctionObject:
      type: object
      properties:
        description:
          type: string
          description: A description of what the function does, used by the model
            to choose when and how to call the function.
        name:
          type: string
          description: The name of the function to be called. Must be a-z, A-Z, 0-9,
            or contain underscores and dashes, with a maximum length of 64.
        parameters:
          $ref: '#/components/schemas/FunctionParameters'
        strict:
          type: boolean
          nullable: true
          default: false
          description: Whether to enable strict schema adherence when generating the
            function call. If set to true, the model will follow the exact schema
            defined in the `parameters` field. Only a subset of JSON Schema is supported
            when `strict` is `true`. Learn more about Structured Outputs in the [function
            calling guide](docs/guides/function-calling).
      required:
      - name
    ChatCompletionStreamOptions:
      description: 'Options for streaming response. Only set this when you set `stream:
        true`.

        '
      type: object
      nullable: true
      default: null
      properties:
        include_usage:
          type: boolean
          description: 'If set, an additional chunk will be streamed before the `data:
            [DONE]` message. The `usage` field on this chunk shows the token usage
            statistics for the entire request, and the `choices` field will always
            be an empty array. All other chunks will also include a `usage` field,
            but with a null value.

            '
    ChatCompletionRequestMessageContentPartText:
      type: object
      title: Text content part
      description: 'Learn about [text inputs](/docs/guides/text-generation).

        '
      properties:
        type:
          type: string
          enum:
          - text
          description: The type of the content part.
          x-stainless-const: true
        text:
          type: string
          description: The text content.
      required:
      - type
      - text
    ChatCompletionRequestMessageContentPartImage:
      type: object
      title: Image content part
      description: 'Learn about [image inputs](/docs/guides/vision).

        '
      properties:
        type:
          type: string
          enum:
          - image_url
          description: The type of the content part.
          x-stainless-const: true
        image_url:
          type: object
          properties:
            url:
              type: string
              description: Either a URL of the image or the base64 encoded image data.
              format: uri
            detail:
              type: string
              description: Specifies the detail level of the image. Learn more in
                the [Vision guide](/docs/guides/vision#low-or-high-fidelity-image-understanding).
              enum:
              - auto
              - low
              - high
              default: auto
          required:
          - url
      required:
      - type
      - image_url
    CreateChatCompletionResponse:
      type: object
      description: Represents a chat completion response returned by model, based
        on the provided input.
      properties:
        id:
          type: string
          description: A unique identifier for the chat completion.
        choices:
          type: array
          description: A list of chat completion choices. Can be more than one if
            `n` is greater than 1.
          items:
            type: object
            required:
            - finish_reason
            - index
            - message
            - logprobs
            properties:
              finish_reason:
                type: string
                description: 'The reason the model stopped generating tokens. This
                  will be `stop` if the model hit a natural stop point or a provided
                  stop sequence,

                  `length` if the maximum number of tokens specified in the request
                  was reached,

                  `content_filter` if content was omitted due to a flag from our content
                  filters,

                  `tool_calls` if the model called a tool, or `function_call` (deprecated)
                  if the model called a function.

                  '
                enum:
                - stop
                - length
                - tool_calls
                - content_filter
                - function_call
              index:
                type: integer
                description: The index of the choice in the list of choices.
              message:
                $ref: '#/components/schemas/ChatCompletionResponseMessage'
              logprobs:
                description: Log probability information for the choice.
                type: object
                nullable: true
                properties:
                  content:
                    description: A list of message content tokens with log probability
                      information.
                    type: array
                    items:
                      $ref: '#/components/schemas/ChatCompletionTokenLogprob'
                    nullable: true
                  refusal:
                    description: A list of message refusal tokens with log probability
                      information.
                    type: array
                    items:
                      $ref: '#/components/schemas/ChatCompletionTokenLogprob'
                    nullable: true
                required:
                - content
                - refusal
        created:
          type: integer
          description: The Unix timestamp (in seconds) of when the chat completion
            was created.
        model:
          type: string
          description: The model used for the chat completion.
        service_tier:
          description: The service tier used for processing the request.
          type: string
          enum:
          - scale
          - default
          example: scale
          nullable: true
        system_fingerprint:
          type: string
          description: 'This fingerprint represents the backend configuration that
            the model runs with.


            Can be used in conjunction with the `seed` request parameter to understand
            when backend changes have been made that might impact determinism.

            '
        object:
          type: string
          description: The object type, which is always `chat.completion`.
          enum:
          - chat.completion
          x-stainless-const: true
        usage:
          $ref: '#/components/schemas/CompletionUsage'
      required:
      - choices
      - created
      - id
      - model
      - object
      x-oaiMeta:
        name: The chat completion object
        group: chat
        example: "{\n  \"id\": \"chatcmpl-123456\",\n  \"object\": \"chat.completion\"\
          ,\n  \"created\": 1728933352,\n  \"model\": \"gpt-4o-2024-08-06\",\n  \"\
          choices\": [\n    {\n      \"index\": 0,\n      \"message\": {\n       \
          \ \"role\": \"assistant\",\n        \"content\": \"Hi there! How can I assist\
          \ you today?\",\n        \"refusal\": null\n      },\n      \"logprobs\"\
          : null,\n      \"finish_reason\": \"stop\"\n    }\n  ],\n  \"usage\": {\n\
          \    \"prompt_tokens\": 19,\n    \"completion_tokens\": 10,\n    \"total_tokens\"\
          : 29,\n    \"prompt_tokens_details\": {\n      \"cached_tokens\": 0\n  \
          \  },\n    \"completion_tokens_details\": {\n      \"reasoning_tokens\"\
          : 0,\n      \"accepted_prediction_tokens\": 0,\n      \"rejected_prediction_tokens\"\
          : 0\n    }\n  },\n  \"system_fingerprint\": \"fp_6b68a8204b\"\n}\n"
tags:
- name: Assistants
  description: Build Assistants that can call models and use tools.
- name: Audio
  description: Turn audio into text or text into audio.
- name: Chat
  description: Given a list of messages comprising a conversation, the model will
    return a response.
- name: Completions
  description: Given a prompt, the model will return one or more predicted completions,
    and can also return the probabilities of alternative tokens at each position.
- name: Embeddings
  description: Get a vector representation of a given input that can be easily consumed
    by machine learning models and algorithms.
- name: Fine-tuning
  description: Manage fine-tuning jobs to tailor a model to your specific training
    data.
- name: Batch
  description: Create large batches of API requests to run asynchronously.
- name: Files
  description: Files are used to upload documents that can be used with features like
    Assistants and Fine-tuning.
- name: Uploads
  description: Use Uploads to upload large files in multiple parts.
- name: Images
  description: Given a prompt and/or an input image, the model will generate a new
    image.
- name: Models
  description: List and describe the various models available in the API.
- name: Moderations
  description: Given text and/or image inputs, classifies if those inputs are potentially
    harmful.
- name: Audit Logs
  description: List user actions and configuration changes within this organization.
