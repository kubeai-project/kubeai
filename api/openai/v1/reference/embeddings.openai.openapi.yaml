openapi: 3.0.0
info:
  title: OpenAI API
  description: The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference
    for more details.
  version: 2.3.0
  termsOfService: https://openai.com/policies/terms-of-use
  contact:
    name: OpenAI Support
    url: https://help.openai.com/
  license:
    name: MIT
    url: https://github.com/openai/openai-openapi/blob/master/LICENSE
servers:
- url: https://api.openai.com/v1
paths:
  /embeddings:
    post:
      operationId: createEmbedding
      tags:
      - Embeddings
      summary: Creates an embedding vector representing the input text.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEmbeddingRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateEmbeddingResponse'
      x-oaiMeta:
        name: Create embeddings
        group: embeddings
        returns: A list of [embedding](/docs/api-reference/embeddings/object) objects.
        examples:
          request:
            curl: "curl https://api.openai.com/v1/embeddings \\\n  -H \"Authorization:\
              \ Bearer $OPENAI_API_KEY\" \\\n  -H \"Content-Type: application/json\"\
              \ \\\n  -d '{\n    \"input\": \"The food was delicious and the waiter...\"\
              ,\n    \"model\": \"text-embedding-ada-002\",\n    \"encoding_format\"\
              : \"float\"\n  }'\n"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nclient.embeddings.create(\n\
              \  model=\"text-embedding-ada-002\",\n  input=\"The food was delicious\
              \ and the waiter...\",\n  encoding_format=\"float\"\n)\n"
            node.js: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\
              \nasync function main() {\n  const embedding = await openai.embeddings.create({\n\
              \    model: \"text-embedding-ada-002\",\n    input: \"The quick brown\
              \ fox jumped over the lazy dog\",\n    encoding_format: \"float\",\n\
              \  });\n\n  console.log(embedding);\n}\n\nmain();"
          response: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\"\
            : \"embedding\",\n      \"embedding\": [\n        0.0023064255,\n    \
            \    -0.009327292,\n        .... (1536 floats total for ada-002)\n   \
            \     -0.0028842222,\n      ],\n      \"index\": 0\n    }\n  ],\n  \"\
            model\": \"text-embedding-ada-002\",\n  \"usage\": {\n    \"prompt_tokens\"\
            : 8,\n    \"total_tokens\": 8\n  }\n}\n"
components:
  schemas:
    CreateEmbeddingRequest:
      type: object
      additionalProperties: false
      properties:
        input:
          description: 'Input text to embed, encoded as a string or array of tokens.
            To embed multiple inputs in a single request, pass an array of strings
            or array of token arrays. The input must not exceed the max input tokens
            for the model (8192 tokens for `text-embedding-ada-002`), cannot be an
            empty string, and any array must be 2048 dimensions or less. [Example
            Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken)
            for counting tokens. Some models may also impose a limit on total number
            of tokens summed across inputs.

            '
          example: The quick brown fox jumped over the lazy dog
          oneOf:
          - type: string
            title: string
            description: The string that will be turned into an embedding.
            default: ''
            example: This is a test.
          - type: array
            title: array
            description: The array of strings that will be turned into an embedding.
            minItems: 1
            maxItems: 2048
            items:
              type: string
              default: ''
              example: '[''This is a test.'']'
          - type: array
            title: array
            description: The array of integers that will be turned into an embedding.
            minItems: 1
            maxItems: 2048
            items:
              type: integer
            example: '[1212, 318, 257, 1332, 13]'
          - type: array
            title: array
            description: The array of arrays containing integers that will be turned
              into an embedding.
            minItems: 1
            maxItems: 2048
            items:
              type: array
              minItems: 1
              items:
                type: integer
            example: '[[1212, 318, 257, 1332, 13]]'
          x-oaiExpandable: true
        model:
          description: 'ID of the model to use. You can use the [List models](/docs/api-reference/models/list)
            API to see all of your available models, or see our [Model overview](/docs/models)
            for descriptions of them.

            '
          example: text-embedding-3-small
          anyOf:
          - type: string
          - type: string
            enum:
            - text-embedding-ada-002
            - text-embedding-3-small
            - text-embedding-3-large
          x-oaiTypeLabel: string
        encoding_format:
          description: The format to return the embeddings in. Can be either `float`
            or [`base64`](https://pypi.org/project/pybase64/).
          example: float
          default: float
          type: string
          enum:
          - float
          - base64
        dimensions:
          description: 'The number of dimensions the resulting output embeddings should
            have. Only supported in `text-embedding-3` and later models.

            '
          type: integer
          minimum: 1
        user:
          type: string
          example: user-1234
          description: 'A unique identifier representing your end-user, which can
            help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).

            '
      required:
      - model
      - input
    CreateEmbeddingResponse:
      type: object
      properties:
        data:
          type: array
          description: The list of embeddings generated by the model.
          items:
            $ref: '#/components/schemas/Embedding'
        model:
          type: string
          description: The name of the model used to generate the embedding.
        object:
          type: string
          description: The object type, which is always "list".
          enum:
          - list
          x-stainless-const: true
        usage:
          type: object
          description: The usage information for the request.
          properties:
            prompt_tokens:
              type: integer
              description: The number of tokens used by the prompt.
            total_tokens:
              type: integer
              description: The total number of tokens used by the request.
          required:
          - prompt_tokens
          - total_tokens
      required:
      - object
      - model
      - data
      - usage
    Embedding:
      type: object
      description: 'Represents an embedding vector returned by embedding endpoint.

        '
      properties:
        index:
          type: integer
          description: The index of the embedding in the list of embeddings.
        embedding:
          type: array
          description: 'The embedding vector, which is a list of floats. The length
            of vector depends on the model as listed in the [embedding guide](/docs/guides/embeddings).

            '
          items:
            type: number
        object:
          type: string
          description: The object type, which is always "embedding".
          enum:
          - embedding
          x-stainless-const: true
      required:
      - index
      - object
      - embedding
      x-oaiMeta:
        name: The embedding object
        example: "{\n  \"object\": \"embedding\",\n  \"embedding\": [\n    0.0023064255,\n\
          \    -0.009327292,\n    .... (1536 floats total for ada-002)\n    -0.0028842222,\n\
          \  ],\n  \"index\": 0\n}\n"
tags:
- name: Assistants
  description: Build Assistants that can call models and use tools.
- name: Audio
  description: Turn audio into text or text into audio.
- name: Chat
  description: Given a list of messages comprising a conversation, the model will
    return a response.
- name: Completions
  description: Given a prompt, the model will return one or more predicted completions,
    and can also return the probabilities of alternative tokens at each position.
- name: Embeddings
  description: Get a vector representation of a given input that can be easily consumed
    by machine learning models and algorithms.
- name: Fine-tuning
  description: Manage fine-tuning jobs to tailor a model to your specific training
    data.
- name: Batch
  description: Create large batches of API requests to run asynchronously.
- name: Files
  description: Files are used to upload documents that can be used with features like
    Assistants and Fine-tuning.
- name: Uploads
  description: Use Uploads to upload large files in multiple parts.
- name: Images
  description: Given a prompt and/or an input image, the model will generate a new
    image.
- name: Models
  description: List and describe the various models available in the API.
- name: Moderations
  description: Given text and/or image inputs, classifies if those inputs are potentially
    harmful.
- name: Audit Logs
  description: List user actions and configuration changes within this organization.
